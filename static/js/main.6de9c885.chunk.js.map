{"version":3,"sources":["assets/howto-3.webp","assets/howto-2.webp","assets/howto-1.webp","assets/howto-0.webp","components/InputForm.tsx","components/Header.tsx","constants/colors.ts","constants/charts.ts","components/charts/UserMessageCountDoughnut.tsx","logic/chart-helpers.ts","components/charts/UserMonthlyActivityGraph.tsx","components/charts/reusable/UserTableHead.tsx","components/charts/UserMessageCountTable.tsx","constants/time.ts","components/charts/UserHourlyActivityGraph.tsx","components/charts/reusable/AmountTag.tsx","components/charts/reusable/TopWordDisplay.tsx","components/charts/UserWordUsageTable.tsx","components/charts/UserEmojiUsageTable.tsx","components/charts/SubjectTimelineBars.tsx","components/DiagramHint.tsx","components/charts/WordCloud.tsx","components/charts/EmojiCloud.tsx","components/charts/UserWeeklyActivityGraph.tsx","components/charts/reusable/MinimalFrequencyTag.tsx","components/charts/reusable/SectionTitle.tsx","components/AnalysisResults.tsx","logic/whatsapp-data.ts","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","InputForm","_ref","handleData","_useState","useState","_useState2","Object","slicedToArray","whatsappFile","setWhatsappFile","_useState3","_useState4","inputOpen","setInputOpen","react","type","className","onClick","Modal","show","onHide","Header","closeVariant","closeButton","Form","onSubmit","event","preventDefault","reader","FileReader","onload","processEvent","target","result","readAsText","Body","FormGroup","FormControl","aria-describedby","placeholder","required","onChange","e","files","accept","FormText","id","muted","Footer","Button","variant","value","qa","howto","menuOpen","setMenuOpen","toggleMenu","menu","defineProperty","Row","Col","lg","md","components_InputForm","size","xs","Figure","FigureImage","src","howto0","alt","FigureCaption","howto1","howto2","howto3","href","rel","defaultColors","defaultGridYConfig","color","defaultGridXConfig","defaultLabelColor","defaultPluginConfig","legend","labels","UserMessageCountDoughnut","data","chartData","users","datasets","map","name","Math","round","messagesPerUser","length","totalMessages","backgroundColor","borderColor","options","plugins","tooltip","callbacks","label","dataSet","concat","dataset","dataIndex","dist","datasetIdKey","getTopWords","inputData","minLength","amount","sorted","keys","filter","w","sort","a","b","Array","fill","_","i","getMaxWordFrequency","minFrequency","words","usage","reduce","word","totalCount","input","res","key","colorIndex","index","UserMonthlyActivityGraph","userMonthData","messagesPerMonthPerUser","date","tension","toConsumableArray","hidden","scales","y","grid","ticks","x","objectSpread","context","UserTableHead","scope","style","UserMessageCountTable","duration","moment","lastMessage","diff","firstMessage","totalDays","asDays","totalMonths","asMonths","totalYears","asYears","Table","borderless","responsive","title","reusable_UserTableHead","parseFloat","toFixed","femkePerUser","charactersPerUser","totalFemke","totalCharacters","hours","weekdays","UserHourlyActivityGraph","userHourData","messagesPerHourPerUser","callback","AmountTag","TopWordDisplay","topWord","reusable_AmountTag","UserWordUsageTable","displayAmount","topWords","wordUsagePerUser","reusable_TopWordDisplay","wordsPerUser","UserEmojiUsageTable","emojiUsagePerUser","emoji","emojisPerUser","SubjectTimelineBars","conversationNames","convo","startDate","unix","endDate","minBarLength","indexAxis","aspectRatio","format","autoSkip","beginAtZero","display","begin","end","DiagramHint","ChartJS","register","WordCloudController","WordElement","WordCloud","minFontSize","maxFontSize","relevantWords","wordUsage","maxFrequency","stepMultiplier","fit","animation","responsiveAnimationDuration","tooltipData","titleFont","displayColors","EmojiCloud","relevantEmojis","emojiUsage","padding","UserWeeklyActivityGraph","userWeekData","messagesPerDayPerUser","MinimalFrequencyTag","frequency","SectionTitle","AnalysisResults","conversationTimeline","reusable_SectionTitle","charts_SubjectTimelineBars","minWordFrequency","totalWords","totalEmojis","message","author","components_DiagramHint","charts_UserMessageCountDoughnut","charts_UserMessageCountTable","charts_UserMonthlyActivityGraph","charts_UserWeeklyActivityGraph","charts_UserHourlyActivityGraph","reusable_MinimalFrequencyTag","charts_WordCloud","charts_UserWordUsageTable","charts_EmojiCloud","charts_UserEmojiUsageTable","WhatsappData","messages","_this","this","classCallCheck","systemMessages","whatsappMessages","m","filtered","trim","startsWith","endsWith","count","msg","replace","push","user","_res$msg$author","apply","split","toLowerCase","forEach","prev","_prev$msg$author","test","hour","weekDay","weekday","dates","from","to","countDate","add","getMonthsBetween","list","month","year","createMatch","match","renameMatch","App","setWhatsappData","filteredData","setFilteredData","analysisResult","components_AnalysisResults","Container","components_Header","parseStringSync","whatsapp","ReactDOM","render","react_default","createElement","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6de9c885.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/howto-3.f9386290.webp\";","module.exports = __webpack_public_path__ + \"static/media/howto-2.a3cee202.webp\";","module.exports = __webpack_public_path__ + \"static/media/howto-1.3776b52e.webp\";","module.exports = __webpack_public_path__ + \"static/media/howto-0.f8fe82b5.webp\";","import * as React from 'react';\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormGroup,\n  FormText,\n  Modal,\n} from 'react-bootstrap';\nimport { FormEvent, useState } from 'react';\nimport './InputForm.css';\n\ninterface InputFormProps {\n  handleData: (data: string | ArrayBuffer | null) => void;\n}\n\nfunction InputForm({ handleData }: InputFormProps) {\n  const [whatsappFile, setWhatsappFile] = useState({} as File);\n  const [inputOpen, setInputOpen] = useState(false);\n\n  const handleChange = (files: FileList) => setWhatsappFile(files[0]);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    const reader = new FileReader();\n    reader.onload = (processEvent) => handleData(processEvent.target!.result);\n    reader.readAsText(whatsappFile);\n\n    setInputOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"menu-button start-button\"\n        onClick={() => setInputOpen(true)}\n      >\n        Start\n      </button>\n      <Modal show={inputOpen} onHide={() => setInputOpen(false)}>\n        <Modal.Header\n          className=\"input-modal-header text-center\"\n          closeVariant=\"white\"\n          closeButton\n        >\n          Get Whatsalyzing\n        </Modal.Header>\n        <Form onSubmit={handleSubmit}>\n          <Modal.Body>\n            <FormGroup>\n              <FormControl\n                type=\"file\"\n                aria-describedby=\"input-file-help\"\n                placeholder=\"The file to upload\"\n                required\n                onChange={(e: any) => handleChange(e.target!.files)}\n                accept=\".txt\"\n              />\n              <FormText id=\"input-file-help\" muted>\n                The file to analyze, check &apos;Getting Started&apos; to learn\n                more.\n              </FormText>\n            </FormGroup>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\" variant=\"light\" value=\"Submit\">\n              Analyze\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n\nexport default InputForm;\n","import * as React from 'react';\nimport { Col, Collapse, Figure, Modal, Row } from 'react-bootstrap';\nimport './Header.css';\nimport { useState } from 'react';\nimport FigureCaption from 'react-bootstrap/FigureCaption';\nimport FigureImage from 'react-bootstrap/FigureImage';\nimport howto3 from '../assets/howto-3.webp';\nimport howto2 from '../assets/howto-2.webp';\nimport howto1 from '../assets/howto-1.webp';\nimport howto0 from '../assets/howto-0.webp';\nimport InputForm from './InputForm';\n\ninterface HeaderProps {\n  handleData: (data: string | ArrayBuffer | null) => void;\n}\n\nfunction Header({ handleData }: HeaderProps) {\n  const [menuOpen, setMenuOpen] = useState({\n    qa: false,\n    howto: false,\n  } as Record<string, boolean>);\n\n  const toggleMenu = (menu: string) =>\n    setMenuOpen({\n      qa: false,\n      howto: false,\n      [menu]: !menuOpen[menu],\n    });\n\n  return (\n    <div className=\"header-container\">\n      <Row>\n        <Col>\n          <header className=\"header\">\n            <h1 className=\"header-title\">Whatsalyzer</h1>\n          </header>\n        </Col>\n      </Row>\n      <Row className=\"menu-container\">\n        <Col lg={4} md={12}>\n          <button\n            type=\"button\"\n            className=\"menu-button\"\n            onClick={() => toggleMenu('howto')}\n          >\n            How does it work?\n          </button>\n        </Col>\n        <Col lg={4} md={12}>\n          <InputForm handleData={handleData} />\n        </Col>\n        <Col lg={4} md={12}>\n          <button\n            type=\"button\"\n            className=\"menu-button\"\n            onClick={() => toggleMenu('qa')}\n          >\n            Q&A\n          </button>\n        </Col>\n      </Row>\n      <Row className=\"info-container\">\n        <Col>\n          <Modal\n            size=\"lg\"\n            onHide={() => toggleMenu('howto')}\n            show={menuOpen.howto}\n          >\n            <Modal.Header\n              className=\"input-modal-header text-center\"\n              closeVariant=\"white\"\n              closeButton\n            >\n              How does it work?\n            </Modal.Header>\n            <Modal.Body className=\"Body\">\n              <ol>\n                <li>Go to the Whatsapp chat you want to analyze</li>\n                <li>Click on the menu button at the top-right</li>\n                <li>Select &apos;More&apos;</li>\n                <li>Click on &apos;Export chat&apos;</li>\n                <li>Click &apos;Without media&apos;</li>\n                <li>\n                  Send the export to yourself by email or through Whatsapp\n                </li>\n              </ol>\n              <p>Then select the file below to analyze the conversation.</p>\n              <Row>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto0}\n                      alt=\"Open the menu\"\n                    />\n                    <FigureCaption>\n                      2. Open options at the top-right\n                    </FigureCaption>\n                  </Figure>\n                </Col>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto1}\n                      alt=\"Select 'More'\"\n                    />\n                    <FigureCaption>3. Select &apos;More&apos;</FigureCaption>\n                  </Figure>\n                </Col>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto2}\n                      alt=\"Click on 'Export chat'\"\n                    />\n                    <FigureCaption>\n                      4. Click on &apos;Export chat&apos;\n                    </FigureCaption>\n                  </Figure>\n                </Col>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto3}\n                      alt=\"Select 'Without media'\"\n                    />\n                    <FigureCaption>\n                      5. Select &apos;Without media&apos;\n                    </FigureCaption>\n                  </Figure>\n                </Col>\n              </Row>\n            </Modal.Body>\n          </Modal>\n          <Modal onHide={() => toggleMenu('qa')} show={menuOpen.qa}>\n            <Modal.Header\n              className=\"input-modal-header text-center\"\n              closeVariant=\"white\"\n              closeButton\n            >\n              Questions and Answers\n            </Modal.Header>\n            <Modal.Body>\n              <p>\n                <strong>Does Whatsalyzer save my data?</strong>\n              </p>\n              <p>\n                No, Whatsalyzer is a fully client-side application. This means\n                that your browser performs all the calculations and no data is\n                ever uploaded to a server. Check the source code if you want to\n                know more.\n              </p>\n              <p>\n                <strong>Can I analyze group chats?</strong>\n              </p>\n              <p>\n                Yes! Those stats are even more interesting than\n                &apos;normal&apos; chats.\n              </p>\n              <p>\n                <strong>Is Whatsalyzer open-source?</strong>\n              </p>\n              <p>\n                Yes! You can view the code right here:{' '}\n                <a\n                  href=\"https://github.com/survivorbat/whatsalyzer\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  github.com/survivorbat/whatsalyzer\n                </a>\n              </p>\n              <p>\n                <strong>Will new features be added?</strong>\n              </p>\n              <p>\n                Yes! The TODO list can be found in the README of the source\n                code, check the link above.\n              </p>\n            </Modal.Body>\n          </Modal>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Header;\n","const defaultColors = [\n  '#e6194b',\n  '#3cb44b',\n  '#ffe119',\n  '#4363d8',\n  '#f58231',\n  '#911eb4',\n  '#46f0f0',\n  '#f032e6',\n  '#bcf60c',\n  '#fabebe',\n  '#008080',\n  '#e6beff',\n  '#9a6324',\n  '#fffac8',\n  '#800000',\n  '#aaffc3',\n  '#808000',\n  '#ffd8b1',\n  '#0202e1',\n  '#808080',\n];\n\nexport default defaultColors;\n","export const defaultGridYConfig = {\n  color: 'rgba(255, 255, 255, 0.2)',\n};\n\nexport const defaultGridXConfig = {\n  color: 'rgba(255, 255, 255, 0.1)',\n};\n\nexport const defaultLabelColor = 'rgba(255, 255, 255, 0.6)';\n\nexport const defaultPluginConfig = {\n  legend: {\n    labels: {\n      color: 'white',\n    },\n  },\n};\n","import * as React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport defaultColors from '../../constants/colors';\nimport { DefaultProps } from './input-interface';\nimport { defaultPluginConfig } from '../../constants/charts';\n\nfunction UserMessageCountDoughnut({ data }: DefaultProps) {\n  const chartData = {\n    labels: data.users,\n    datasets: [\n      {\n        id: 0,\n        data: data.users.map((name) =>\n          Math.round(\n            (data.messagesPerUser[name].length / data.totalMessages) * 100\n          )\n        ),\n        backgroundColor: defaultColors,\n        borderColor: '#000000',\n      },\n    ],\n  };\n\n  const options = {\n    plugins: {\n      legend: defaultPluginConfig.legend,\n      tooltip: {\n        callbacks: {\n          label: (dataSet: any) =>\n            `${dataSet.label}: ${dataSet.dataset.data[dataSet.dataIndex]}%`,\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Doughnut datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserMessageCountDoughnut;\n","import defaultColors from '../constants/colors';\n\nexport interface TopWord {\n  amount: number;\n  name: string;\n}\n\nexport const getTopWords = (\n  inputData: Record<string, number>,\n  minLength: number,\n  amount: number\n): TopWord[] => {\n  const sorted = Object.keys(inputData)\n    .filter((w) => w.length >= minLength)\n    .sort((a, b) => inputData[b] - inputData[a]);\n\n  // Create an empty array with zeroes with the specified amount as length\n  return (\n    new Array(amount)\n      .fill(0)\n      // Map the empty array to the expected values using the index of the empty array element\n      .map((_, i) => ({ name: sorted[i], amount: inputData[sorted[i]] }))\n      // Filter out empty values\n      .filter((i) => !!i.name)\n  );\n};\n\nexport const getMaxWordFrequency = (\n  minFrequency: number,\n  words: string[],\n  usage: Record<string, number>\n) =>\n  words.reduce(\n    (result, word) => (usage[word] > result ? usage[word] : result),\n    minFrequency + 1\n  );\n\nexport const totalCount = (input: Record<string, number>): number =>\n  Object.keys(input).reduce((res, key) => res + input[key], 0);\n\nexport const colorIndex = (index: number) =>\n  defaultColors[index % defaultColors.length];\n","import * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { DefaultProps } from './input-interface';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n  defaultPluginConfig,\n} from '../../constants/charts';\nimport { colorIndex, totalCount } from '../../logic/chart-helpers';\n\nfunction UserMonthlyActivityGraph({ data }: DefaultProps) {\n  const userMonthData = data.users.map((name, index) => ({\n    id: index + 1,\n    label: name,\n    data: Object.keys(data.messagesPerMonthPerUser).map(\n      (date) => data.messagesPerMonthPerUser[date][name] || 0\n    ),\n    borderColor: colorIndex(index),\n    backgroundColor: colorIndex(index),\n    tension: 0.3,\n  }));\n\n  const chartData = {\n    labels: Object.keys(data.messagesPerMonthPerUser),\n    datasets: [\n      ...userMonthData,\n      {\n        id: 0,\n        label: 'Total Messages',\n        data: Object.keys(data.messagesPerMonthPerUser).map((date) =>\n          totalCount(data.messagesPerMonthPerUser[date])\n        ),\n        borderColor: 'white',\n        backgroundColor: 'white',\n        tension: 0.3,\n        hidden: true,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          color: defaultLabelColor,\n        },\n      },\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      ...defaultPluginConfig,\n      tooltip: {\n        callbacks: {\n          label: (context: any) =>\n            `${context.dataset.label}: ${\n              context.dataset.data[context.dataIndex]\n            } messages`,\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Line datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserMonthlyActivityGraph;\n","import * as React from 'react';\nimport { colorIndex } from '../../../logic/chart-helpers';\n\ninterface UserTableHeadProps {\n  name: string;\n  index: number;\n}\n\nfunction UserTableHead({ index, name }: UserTableHeadProps) {\n  return (\n    <th scope=\"row\" style={{ color: colorIndex(index) }}>\n      {name}\n    </th>\n  );\n}\n\nexport default UserTableHead;\n","import * as React from 'react';\nimport { Table } from 'react-bootstrap';\nimport moment from 'moment';\nimport { DefaultProps } from './input-interface';\nimport UserTableHead from './reusable/UserTableHead';\n\nfunction UserMessageCountTable({ data }: DefaultProps) {\n  const duration = moment.duration(\n    data.lastMessage.date.diff(data.firstMessage.date)\n  );\n\n  const totalDays = duration.asDays();\n  const totalMonths = duration.asMonths();\n  const totalYears = duration.asYears();\n\n  return (\n    <Table borderless responsive className=\"text-light\">\n      <thead>\n        <tr>\n          <th scope=\"col\" title=\"The user\">\n            User\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The amount of messages a specific user has contributed to this conversation\"\n          >\n            #\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The percentage of messages a specific user has contributed to the conversation\"\n          >\n            %\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The daily amount of messages a user has contributed to the conversation\"\n          >\n            Daily\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The weekly amount of messages a user has contributed to the conversation\"\n          >\n            Monthly\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The yearly amount of messages a user has contributed to the conversation\"\n          >\n            Yearly\n          </th>\n          <th\n            scope=\"col\"\n            title=\"⇪↩ヾ   ⤷э⇅   ↪↩∧   э⇅⤷⇆⇪   ∧↩   ⊏↩⤣↻э⇅⇇⇅↪⇆   ∧⇇⇅   ↹⇅⤣⇊⇅\"\n          >\n            FEMKE\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.users.map((name, index) => (\n          <tr key={name}>\n            <UserTableHead name={name} index={index} />\n            <td>{data.messagesPerUser[name].length}</td>\n            <td>\n              {Math.round(\n                (data.messagesPerUser[name].length / data.totalMessages) * 100\n              )}\n              %\n            </td>\n            <td>\n              {parseFloat(\n                `${data.messagesPerUser[name].length / totalDays}`\n              ).toFixed(1)}\n            </td>\n            <td>\n              {parseFloat(\n                `${data.messagesPerUser[name].length / totalMonths}`\n              ).toFixed(1)}\n            </td>\n            <td>\n              {parseFloat(\n                `${data.messagesPerUser[name].length / totalYears}`\n              ).toFixed(1)}\n            </td>\n            <td>\n              {Math.round(\n                (data.femkePerUser[name] / data.charactersPerUser[name]) * 100\n              )}\n              %\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr className=\"fw-bold\">\n          <th scope=\"row\">Total</th>\n          <td>{data.totalMessages}</td>\n          <td>100%</td>\n          <td>{parseFloat(`${data.totalMessages / totalDays}`).toFixed(1)}</td>\n          <td>\n            {parseFloat(`${data.totalMessages / totalMonths}`).toFixed(1)}\n          </td>\n          <td>{parseFloat(`${data.totalMessages / totalYears}`).toFixed(1)}</td>\n          <td>{Math.round((data.totalFemke / data.totalCharacters) * 100)}%</td>\n        </tr>\n      </tfoot>\n    </Table>\n  );\n}\n\nexport default UserMessageCountTable;\n","export const hours = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23,\n];\n\nexport const weekdays = [0, 1, 2, 3, 4, 5, 6];\n","import * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { DefaultProps } from './input-interface';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n  defaultPluginConfig,\n} from '../../constants/charts';\nimport { hours } from '../../constants/time';\nimport { colorIndex, totalCount } from '../../logic/chart-helpers';\n\nfunction UserHourlyActivityGraph({ data }: DefaultProps) {\n  const userHourData = data.users.map((name, index) => ({\n    id: index + 1,\n    label: name,\n    data: Object.keys(data.messagesPerHourPerUser).map(\n      (date) =>\n        (data.messagesPerHourPerUser[date][name] /\n          data.messagesPerUser[name].length) *\n          100 || 0\n    ),\n    borderColor: colorIndex(index),\n    backgroundColor: colorIndex(index),\n    tension: 0.3,\n  }));\n\n  const chartData = {\n    labels: hours,\n    datasets: [\n      ...userHourData,\n      {\n        id: 0,\n        label: 'Total Average',\n        data: Object.keys(data.messagesPerHourPerUser).map(\n          (date) =>\n            (totalCount(data.messagesPerHourPerUser[date]) /\n              data.totalMessages) *\n              100 || 0\n        ),\n        borderColor: 'white',\n        backgroundColor: 'white',\n        tension: 0.3,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          callback: (label: string) => `${label}%`,\n          color: defaultLabelColor,\n        },\n      },\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          callback: (label: string) => `${label}:00`,\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      ...defaultPluginConfig,\n      tooltip: {\n        callbacks: {\n          label: (context: any) =>\n            `${context.dataset.label}: ${Math.round(\n              context.dataset.data[context.dataIndex]\n            )}%`,\n          title: (context: any) => `${context[0].label}:00`,\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Line datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserHourlyActivityGraph;\n","import * as React from 'react';\n\ninterface AmountTagProps {\n  amount: number;\n}\n\nfunction AmountTag({ amount }: AmountTagProps) {\n  return <small className=\"text-muted\">({amount})</small>;\n}\n\nexport default AmountTag;\n","import * as React from 'react';\nimport AmountTag from './AmountTag';\nimport { TopWord } from '../../../logic/chart-helpers';\n\ninterface TopWordDisplayProps {\n  topWord: TopWord;\n}\n\nfunction TopWordDisplay({ topWord }: TopWordDisplayProps) {\n  return (\n    <span className=\"rounded-pill participant-pill\" key={topWord.name}>\n      {topWord.name} <AmountTag amount={topWord.amount} />\n    </span>\n  );\n}\n\nexport default TopWordDisplay;\n","import * as React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { UsageTableProps } from './input-interface';\nimport { getTopWords } from '../../logic/chart-helpers';\nimport UserTableHead from './reusable/UserTableHead';\nimport TopWordDisplay from './reusable/TopWordDisplay';\n\nfunction UserWordUsageTable({\n  data,\n  minLength,\n  displayAmount,\n}: UsageTableProps) {\n  const topWords = data.users.map((name) =>\n    getTopWords(data.wordUsagePerUser[name], minLength, displayAmount)\n  );\n\n  return (\n    <Table borderless responsive className=\"text-light\">\n      <thead>\n        <tr>\n          <th scope=\"col\" title=\"The user\">\n            User\n          </th>\n          <th scope=\"col\" title={`Top-${displayAmount} words this user uses`}>\n            Words\n          </th>\n          <th scope=\"col\" title=\"Total amount of words this user has messaged\">\n            Total\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.users.map((name, index) => (\n          <tr key={name}>\n            <UserTableHead name={name} index={index} />\n            <td>\n              {topWords[index].map((word) => (\n                <TopWordDisplay key={word.name} topWord={word} />\n              ))}\n            </td>\n            <td>{data.wordsPerUser[name].length}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default UserWordUsageTable;\n","import * as React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { UsageTableProps } from './input-interface';\nimport { getTopWords } from '../../logic/chart-helpers';\nimport UserTableHead from './reusable/UserTableHead';\nimport TopWordDisplay from './reusable/TopWordDisplay';\n\nfunction UserEmojiUsageTable({\n  data,\n  minLength,\n  displayAmount,\n}: UsageTableProps) {\n  const topWords = data.users.map((name) =>\n    getTopWords(data.emojiUsagePerUser[name], minLength, displayAmount)\n  );\n\n  return (\n    <Table borderless responsive className=\"text-light\">\n      <thead>\n        <tr>\n          <th scope=\"col\" title=\"The user\">\n            User\n          </th>\n          <th scope=\"col\" title={`Top-${displayAmount} emojis this user uses`}>\n            Emojis\n          </th>\n          <th scope=\"col\" title=\"Total amount of emojis this user has messaged\">\n            Total\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.users.map((name, index) => (\n          <tr key={name}>\n            <UserTableHead name={name} index={index} />\n            <td>\n              {topWords[index].map((emoji) => (\n                <TopWordDisplay key={emoji.name} topWord={emoji} />\n              ))}\n            </td>\n            <td>{data.emojisPerUser[name].length}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default UserEmojiUsageTable;\n","import * as React from 'react';\nimport moment from 'moment';\nimport { Bar } from 'react-chartjs-2';\nimport { DefaultProps } from './input-interface';\nimport defaultColors from '../../constants/colors';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n} from '../../constants/charts';\n\nfunction SubjectTimelineBars({ data }: DefaultProps) {\n  const chartData = {\n    labels: data.conversationNames.map((convo) => convo.name),\n    datasets: [\n      {\n        id: 0,\n        data: data.conversationNames.map((convo) => [\n          convo.startDate.unix(),\n          convo.endDate.unix(),\n        ]),\n        borderColor: defaultColors,\n        backgroundColor: defaultColors,\n        minBarLength: 5,\n      },\n    ],\n  };\n\n  const options = {\n    indexAxis: 'y',\n    aspectRatio: 1.5,\n    scales: {\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          callback: (label: number) => moment.unix(label).format('MMM YYYY'),\n          color: defaultLabelColor,\n          autoSkip: false,\n        },\n        beginAtZero: false,\n      },\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            const begin = context.dataset.data[context.dataIndex][0];\n            const end = context.dataset.data[context.dataIndex][1];\n\n            return `${moment.unix(begin).format('MMM YYYY')} - ${moment\n              .unix(end)\n              .format('MMM YYYY')}`;\n          },\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Bar options={options} data={chartData} />;\n}\n\nexport default SubjectTimelineBars;\n","import * as React from 'react';\n\nfunction DiagramHint() {\n  return (\n    <p>\n      <small className=\"text-muted\">\n        Tip: Click on the names to toggle their visibility\n      </small>\n    </p>\n  );\n}\n\nexport default DiagramHint;\n","import * as React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js';\nimport { WordCloudController, WordElement } from 'chartjs-chart-wordcloud';\nimport defaultColors from '../../constants/colors';\nimport { CloudChartProps } from './input-interface';\n\nimport './Cloud.css';\nimport { getMaxWordFrequency } from '../../logic/chart-helpers';\n\nChartJS.register(WordCloudController, WordElement);\n\nfunction WordCloud({\n  data,\n  minFrequency,\n  minLength,\n  minFontSize,\n  maxFontSize,\n}: CloudChartProps) {\n  const relevantWords = Object.keys(data.wordUsage)\n    .filter((word) => word.length > minLength!)\n    .filter((word) => data.wordUsage[word] > minFrequency);\n\n  if (relevantWords.length === 0) {\n    return (\n      <span className=\"text-muted\">Not enough data for word cloud :(</span>\n    );\n  }\n\n  const maxFrequency = getMaxWordFrequency(\n    minFrequency,\n    relevantWords,\n    data.wordUsage\n  );\n\n  const frequencySpread = maxFrequency - minFrequency;\n  const fontSizeSpread = maxFontSize - minFontSize;\n\n  // For every frequency, this is the multiplier for the font size\n  const stepMultiplier = fontSizeSpread / frequencySpread;\n\n  const chartData = {\n    labels: relevantWords,\n    datasets: [\n      {\n        id: 0,\n        data: relevantWords.map(\n          (name) => stepMultiplier * (data.wordUsage[name] - 1) + minFontSize\n        ),\n        fit: true,\n        color: defaultColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n    responsiveAnimationDuration: 0,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (tooltipData: any) =>\n            `Found ${data.wordUsage[tooltipData.label]}`,\n        },\n        titleFont: {\n          size: 20,\n        },\n        displayColors: false,\n      },\n    },\n  };\n\n  // @ts-ignore\n  return (\n    <div className=\"cloud-container\">\n      <div className=\"cloud-wrapper\">\n        <Chart\n          type=\"wordCloud\"\n          datasetIdKey=\"id\"\n          data={chartData}\n          options={options}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WordCloud;\n","import * as React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js';\nimport { WordCloudController, WordElement } from 'chartjs-chart-wordcloud';\nimport { CloudChartProps } from './input-interface';\n\nimport './Cloud.css';\nimport { getMaxWordFrequency } from '../../logic/chart-helpers';\n\nChartJS.register(WordCloudController, WordElement);\n\nfunction EmojiCloud({\n  data,\n  minFrequency,\n  minFontSize,\n  maxFontSize,\n}: CloudChartProps) {\n  const relevantEmojis = Object.keys(data.emojiUsage).filter(\n    (emoji) => data.emojiUsage[emoji] >= minFrequency\n  );\n\n  if (relevantEmojis.length === 0) {\n    return (\n      <span className=\"text-muted\">Not enough data for emoji cloud :(</span>\n    );\n  }\n\n  const maxFrequency = getMaxWordFrequency(\n    minFrequency,\n    relevantEmojis,\n    data.emojiUsage\n  );\n\n  const frequencySpread = maxFrequency - minFrequency;\n  const fontSizeSpread = maxFontSize - minFontSize;\n\n  // For every frequency, this is the multiplier for the font size\n  const stepMultiplier = fontSizeSpread / frequencySpread;\n\n  const chartData = {\n    labels: relevantEmojis,\n    datasets: [\n      {\n        id: 0,\n        data: relevantEmojis.map(\n          (name) => stepMultiplier * (data.emojiUsage[name] - 1) + minFontSize\n        ),\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n    responsiveAnimationDuration: 0,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (tooltipData: any) =>\n            `Found ${data.emojiUsage[tooltipData.label]}`,\n        },\n        titleFont: {\n          size: 100,\n        },\n        padding: 12,\n        displayColors: false,\n      },\n    },\n  };\n\n  // @ts-ignore\n  return (\n    <div className=\"cloud-container\">\n      <div className=\"cloud-wrapper\">\n        <Chart\n          type=\"wordCloud\"\n          datasetIdKey=\"id\"\n          data={chartData}\n          options={options}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default EmojiCloud;\n","import * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nimport { DefaultProps } from './input-interface';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n  defaultPluginConfig,\n} from '../../constants/charts';\nimport { weekdays } from '../../constants/time';\nimport { colorIndex, totalCount } from '../../logic/chart-helpers';\n\nfunction UserWeeklyActivityGraph({ data }: DefaultProps) {\n  const userWeekData = data.users.map((name, index) => ({\n    id: index + 1,\n    label: name,\n    data: Object.keys(data.messagesPerDayPerUser).map(\n      (date) =>\n        (data.messagesPerDayPerUser[date][name] /\n          data.messagesPerUser[name].length) *\n          100 || 0\n    ),\n    borderColor: colorIndex(index),\n    backgroundColor: colorIndex(index),\n    tension: 0.2,\n  }));\n\n  const chartData = {\n    labels: weekdays,\n    datasets: [\n      ...userWeekData,\n      {\n        id: 0,\n        label: 'Total Average',\n        data: Object.keys(data.messagesPerDayPerUser).map(\n          (date) =>\n            (totalCount(data.messagesPerDayPerUser[date]) /\n              data.totalMessages) *\n              100 || 0\n        ),\n        borderColor: 'white',\n        backgroundColor: 'white',\n        tension: 0.3,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          callback: (label: string) => `${label}%`,\n          color: defaultLabelColor,\n        },\n      },\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          callback: (label: number) => moment.weekdays()[label],\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      ...defaultPluginConfig,\n      tooltip: {\n        callbacks: {\n          label: (context: any) =>\n            `${context.dataset.label}: ${Math.round(\n              context.dataset.data[context.dataIndex]\n            )}%`,\n          title: (context: any) => moment.weekdays()[context[0].label],\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Line datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserWeeklyActivityGraph;\n","import * as React from 'react';\n\ninterface MinimalFrequencyTagProps {\n  frequency: number;\n}\n\nfunction MinimalFrequencyTag({ frequency }: MinimalFrequencyTagProps) {\n  return (\n    <p>\n      <small className=\"text-muted\">\n        Minimal frequency:\n        {frequency}\n      </small>\n    </p>\n  );\n}\n\nexport default MinimalFrequencyTag;\n","import { Col, Row } from 'react-bootstrap';\nimport * as React from 'react';\n\ninterface SectionTitleProps {\n  title: string;\n  name: string;\n}\n\nfunction SectionTitle({ name, title }: SectionTitleProps) {\n  return (\n    <Row className=\"chart-title\">\n      <Col>\n        <h2 className=\"section-title\" title={title}>\n          {name}\n        </h2>\n      </Col>\n    </Row>\n  );\n}\n\nexport default SectionTitle;\n","import * as React from 'react';\nimport 'chart.js/auto';\nimport './AnalysisResults.css';\nimport { Col, Row, Tab, Tabs } from 'react-bootstrap';\nimport UserMessageCountDoughnut from './charts/UserMessageCountDoughnut';\nimport UserActivityGraph from './charts/UserMonthlyActivityGraph';\nimport UserMessageCountTable from './charts/UserMessageCountTable';\nimport UserHourlyActivityGraph from './charts/UserHourlyActivityGraph';\nimport UserWordUsageTable from './charts/UserWordUsageTable';\nimport UserEmojiUsageTable from './charts/UserEmojiUsageTable';\nimport SubjectTimelineBars from './charts/SubjectTimelineBars';\nimport DiagramHint from './DiagramHint';\nimport WordCloud from './charts/WordCloud';\nimport EmojiCloud from './charts/EmojiCloud';\nimport UserWeeklyActivityGraph from './charts/UserWeeklyActivityGraph';\nimport { colorIndex } from '../logic/chart-helpers';\nimport MinimalFrequencyTag from './charts/reusable/MinimalFrequencyTag';\nimport SectionTitle from './charts/reusable/SectionTitle';\nimport WhatsappData from '../logic/whatsapp-data';\n\ninterface AnalysisResultsProps {\n  data: WhatsappData;\n}\n\nfunction AnalysisResults({ data }: AnalysisResultsProps) {\n  let conversationTimeline;\n\n  if (data.conversationNames.length > 0) {\n    conversationTimeline = (\n      <>\n        <SectionTitle\n          title=\"Timelines related to group conversations\"\n          name=\"Group Timelines\"\n        />\n        <Row>\n          <Col className=\"chart-container\">\n            <h3 title=\"A timeline of the 'names' of the conversation, only works for English chats now\">\n              Group Subject Timeline\n            </h3>\n            <SubjectTimelineBars data={data} />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n\n  // I want to filter on simple words, so I found 6 to be fair\n  const minWordLength = 6;\n\n  // This should ensure that the word cloud does not get too big but still appears\n  // if there aren't that many words\n  const minWordFrequency = Math.round(data.totalWords / 8000);\n  const minEmojiFrequency = 1;\n\n  // A top-5 is nice, but I want to make it a slider or something\n  const topUsageAmount = 5;\n\n  return (\n    <>\n      <SectionTitle\n        title=\"General conversation stats\"\n        name=\"Conversation Stats\"\n      />\n      <Row>\n        <Col className=\"header-container\" md={12} lg={4}>\n          <h3 title=\"All the users in this conversation\">Users</h3>\n          <div className=\"d-inline-flex flex-wrap justify-content-center\">\n            {data.users.map((name, index) => (\n              <div\n                key={name}\n                style={{ color: colorIndex(index) }}\n                className=\"fw-bold participant-pill\"\n              >\n                {name}\n              </div>\n            ))}\n          </div>\n        </Col>\n        <Col className=\"header-container\" md={12} lg={4}>\n          <h3 title=\"The total amount of messages in this conversation\">\n            Total Messages\n          </h3>\n          <div className=\"display-1 fw-bold\">{data.totalMessages}</div>\n        </Col>\n        <Col className=\"header-container\" md={12} lg={4}>\n          <h3 title=\"The total amount of emojis in this conversation\">\n            Total Emojis\n          </h3>\n          <div className=\"display-1 fw-bold\">{data.totalEmojis}</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"header-container\" md={12} lg={6}>\n          <h3 title=\"The first message in this conversation\">First Message</h3>\n          <div className=\"fw-bold\">{data.firstMessage.message}</div>\n          <div className=\"text-muted\">\n            {data.firstMessage.author},{' '}\n            {data.firstMessage.date.format('DD-MM-YYYY')}\n          </div>\n        </Col>\n        <Col\n          title=\"The last message in this conversation\"\n          className=\"header-container\"\n          md={12}\n          lg={6}\n        >\n          <h3>Last Message</h3>\n          <div className=\"fw-bold\">{data.lastMessage.message}</div>\n          <div className=\"text-muted\">\n            {data.lastMessage.author},{' '}\n            {data.lastMessage.date.format('DD-MM-YYYY')}\n          </div>\n        </Col>\n      </Row>\n      <SectionTitle\n        title=\"All data related to user activity\"\n        name=\"User Activity\"\n      />\n      <Row>\n        <Col className=\"chart-container\" md={12} lg={6}>\n          <h3 title=\"The percentage of messages a specific user has contributed to the conversation\">\n            Message Distribution\n          </h3>\n          <Row>\n            <Col>\n              <DiagramHint />\n              <UserMessageCountDoughnut data={data} />\n            </Col>\n          </Row>\n        </Col>\n        <Col className=\"chart-container\" md={12} lg={6}>\n          <h3 title=\"The total amount of messages\">Total Messages</h3>\n          <UserMessageCountTable data={data} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3 title=\"The amount of messages per user per month\">\n            Monthly Activity\n          </h3>\n          <DiagramHint />\n          <UserActivityGraph data={data} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3 title=\"The activity of a user on a particular week day, relative to their total activity\">\n            Relative Weekly Activity\n          </h3>\n          <DiagramHint />\n          <UserWeeklyActivityGraph data={data} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3 title=\"The activity of a user on a particular hour, relative to their total activity\">\n            Relative Hourly Activity\n          </h3>\n          <DiagramHint />\n          <UserHourlyActivityGraph data={data} />\n        </Col>\n      </Row>\n      <SectionTitle\n        title=\"All data related to the contents of a user's messages\"\n        name=\"Message Contents\"\n      />\n      <Row>\n        <Col className=\"chart-container\">\n          <h3\n            title={`Most popular words, only words with at least 6 characters and a frequency higher than ${minWordFrequency}`}\n          >\n            Popular Words\n          </h3>\n          <MinimalFrequencyTag frequency={minWordFrequency} />\n          <WordCloud\n            minFrequency={minWordFrequency}\n            minLength={minWordLength}\n            minFontSize={14}\n            maxFontSize={80}\n            data={data}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <UserWordUsageTable\n            data={data}\n            displayAmount={topUsageAmount}\n            minLength={minWordLength}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3\n            title={`Most popular emojis, only emojis with a frequency higher than ${minEmojiFrequency}`}\n          >\n            Popular Emojis\n          </h3>\n          <MinimalFrequencyTag frequency={minEmojiFrequency} />\n          <EmojiCloud\n            minFrequency={minEmojiFrequency}\n            minFontSize={24}\n            maxFontSize={220}\n            data={data}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <UserEmojiUsageTable\n            data={data}\n            displayAmount={topUsageAmount}\n            minLength={1}\n          />\n        </Col>\n      </Row>\n      {conversationTimeline}\n    </>\n  );\n}\n\nexport default AnalysisResults;\n","import { Message } from 'whatsapp-chat-parser/types/types';\nimport moment from 'moment';\nimport { hours, weekdays } from '../constants/time';\n\n/**\n * Get all the months date A and date B\n * @param from The starting date\n * @param to The ending date\n */\nexport const getMonthsBetween = (\n  from: moment.Moment,\n  to: moment.Moment\n): moment.Moment[] => {\n  const dates = [];\n\n  const countDate = moment(from);\n\n  while (to.unix() >= countDate.unix()) {\n    dates.push(moment(countDate));\n    countDate.add(1, 'month');\n  }\n\n  return dates;\n};\n\ninterface ConversationName {\n  name: string;\n  user: string;\n  startDate: moment.Moment;\n  endDate: moment.Moment;\n}\n\nexport const getConversationSubjects = (\n  systemMessages: WhatsappMessage[]\n): ConversationName[] =>\n  systemMessages.reduce((prev, msg) => {\n    // TODO: These only work in English now...\n    const createMatch = msg.message.match(/^(.*) created group \"(.+),/);\n    const renameMatch = msg.message.match(\n      /^(.*) changed the subject from \"(.+), to \"(.+),/\n    );\n\n    // If we find the create message, we add it as the first item in the list with an unspecified end date\n    if (createMatch) {\n      prev.push({\n        name: createMatch[2],\n        user: createMatch[1],\n        startDate: msg.date,\n        endDate: moment(),\n      });\n    }\n\n    // If we find a rename message, we...\n    if (renameMatch) {\n      // First check if a message came before it, because if it does, that message now gets an\n      // end date\n      if (prev.length > 0) {\n        prev[prev.length - 1].endDate = msg.date;\n      }\n\n      // Then we add the new item with an unspecified end date\n      prev.push({\n        name: renameMatch[3],\n        user: renameMatch[1],\n        startDate: msg.date,\n        endDate: moment(),\n      });\n    }\n\n    return prev;\n  }, [] as ConversationName[]);\n\n/**\n * Get the words in a message\n * @param message The message to dissect\n */\nexport const getWords = (message: string): string[] =>\n  message\n    .split(/\\b[^\\w']+\\b/)\n    .map((w) => w.toLowerCase().replace(/[^a-zA-Z']/g, ''))\n    .filter((w) => w !== '');\n\n/**\n * Get the words in a message\n * @param message The message to dissect\n */\nexport const getEmojis = (message: string): string[] =>\n  [...message].filter((w) => /\\p{Extended_Pictographic}/u.test(w));\n\nexport interface WhatsappMessage {\n  date: moment.Moment;\n  author: string;\n  message: string;\n}\n\nclass WhatsappData {\n  readonly totalMessages: number;\n\n  readonly totalCharacters: number;\n\n  readonly totalWords: number;\n\n  readonly totalEmojis: number;\n\n  readonly totalFemke: number;\n\n  readonly users: string[];\n\n  readonly conversationNames: ConversationName[];\n\n  readonly messagesPerUser: Record<string, WhatsappMessage[]>;\n\n  readonly charactersPerUser: Record<string, number>;\n\n  readonly femkePerUser: Record<string, number>;\n\n  readonly wordsPerUser: Record<string, string[]>;\n\n  readonly emojisPerUser: Record<string, string[]>;\n\n  readonly wordUsagePerUser: Record<string, Record<string, number>>;\n\n  readonly emojiUsagePerUser: Record<string, Record<string, number>>;\n\n  readonly wordUsage: Record<string, number>;\n\n  readonly emojiUsage: Record<string, number>;\n\n  readonly messagesPerMonthPerUser: Record<string, Record<string, number>>;\n\n  readonly messagesPerHourPerUser: Record<string, Record<string, number>>;\n\n  readonly messagesPerDayPerUser: Record<string, Record<string, number>>;\n\n  readonly systemMessages: WhatsappMessage[];\n\n  readonly firstMessage: WhatsappMessage;\n\n  readonly lastMessage: WhatsappMessage;\n\n  /**\n   * Initialize the data class with the messages of this conversation.\n   * @param messages The parsed messages\n   */\n  constructor(readonly messages: Message[]) {\n    const whatsappMessages = messages.map((m) => ({\n      message: m.message,\n      author: m.author,\n      date: moment(m.date),\n    }));\n\n    this.systemMessages = whatsappMessages.filter((m) => m.author === 'System');\n\n    const filtered = whatsappMessages\n      .filter((m) => m.author !== 'System')\n      // This should take care of all <Media Omitted> messages, in whatever language the user has their phone\n      .filter(\n        (m) =>\n          !(m.message.trim().startsWith('<') && m.message.trim().endsWith('>'))\n      )\n      .sort((a, b) => a.date.unix() - b.date.unix());\n\n    this.firstMessage = filtered[0] || {\n      date: moment(0),\n      author: 'Not Found',\n      message: 'Not Found',\n    };\n    this.lastMessage = filtered[filtered.length - 1] || {\n      date: moment(0),\n      author: 'Not Found',\n      message: 'Not Found',\n    };\n\n    this.totalFemke = filtered.reduce(\n      (count, msg) => count + msg.message.replace(/[^A-Z]/g, '').length,\n      0\n    );\n    this.totalMessages = filtered.length;\n    this.totalCharacters = filtered.reduce(\n      (count, msg) => count + msg.message.length,\n      0\n    );\n\n    this.messagesPerUser = filtered.reduce((res, msg) => {\n      if (!res[msg.author]) {\n        res[msg.author] = [];\n      }\n\n      res[msg.author].push(msg);\n      return res;\n    }, {} as Record<string, WhatsappMessage[]>);\n\n    this.charactersPerUser = Object.keys(this.messagesPerUser).reduce(\n      (res, user) => {\n        res[user] = this.messagesPerUser[user].reduce(\n          (count, msg) => count + msg.message.length,\n          0\n        );\n        return res;\n      },\n      {} as Record<string, number>\n    );\n\n    this.femkePerUser = Object.keys(this.messagesPerUser).reduce(\n      (res, user) => {\n        res[user] = this.messagesPerUser[user].reduce(\n          (count, msg) => count + msg.message.replace(/[^A-Z]/g, '').length,\n          0\n        );\n        return res;\n      },\n      {} as Record<string, number>\n    );\n\n    // Set users, we use the keys of wordsPerUser to sort them based on the amount of messages\n    this.users = Object.keys(this.messagesPerUser).sort(\n      (a, b) => this.messagesPerUser[b].length - this.messagesPerUser[a].length\n    );\n\n    // Set words per user\n    this.wordsPerUser = filtered.reduce((res, msg) => {\n      if (!res[msg.author]) {\n        res[msg.author] = [];\n      }\n\n      res[msg.author].push(...getWords(msg.message));\n      return res;\n    }, {} as Record<string, string[]>);\n\n    this.wordUsagePerUser = Object.keys(this.wordsPerUser).reduce(\n      (res, user) => {\n        res[user] = this.wordsPerUser[user].reduce((result, word) => {\n          if (!result[word]) {\n            result[word] = 0;\n          }\n\n          result[word] += 1;\n          return result;\n        }, {} as Record<string, number>);\n\n        return res;\n      },\n      {} as Record<string, Record<string, number>>\n    );\n\n    this.wordUsage = Object.keys(this.wordUsagePerUser).reduce((res, user) => {\n      Object.keys(this.wordUsagePerUser[user]).forEach((word) => {\n        if (!res[word]) {\n          res[word] = 0;\n        }\n\n        res[word] += this.wordUsagePerUser[user][word];\n      });\n\n      return res;\n    }, {} as Record<string, number>);\n\n    this.emojisPerUser = filtered.reduce((prev, msg) => {\n      if (!prev[msg.author]) {\n        prev[msg.author] = [];\n      }\n\n      prev[msg.author].push(...getEmojis(msg.message));\n\n      return prev;\n    }, {} as Record<string, string[]>);\n\n    this.emojiUsagePerUser = Object.keys(this.emojisPerUser).reduce(\n      (res, user) => {\n        res[user] = this.emojisPerUser[user].reduce((result, word) => {\n          if (!result[word]) {\n            result[word] = 0;\n          }\n\n          result[word] += 1;\n          return result;\n        }, {} as Record<string, number>);\n\n        return res;\n      },\n      {} as Record<string, Record<string, number>>\n    );\n\n    this.emojiUsage = Object.keys(this.emojiUsagePerUser).reduce(\n      (res, user) => {\n        Object.keys(this.emojiUsagePerUser[user]).forEach((emoji) => {\n          if (!res[emoji]) {\n            res[emoji] = 0;\n          }\n\n          res[emoji] += this.emojiUsagePerUser[user][emoji];\n        });\n\n        return res;\n      },\n      {} as Record<string, number>\n    );\n\n    this.totalWords = Object.keys(this.wordsPerUser).reduce(\n      (res, user) => res + this.wordsPerUser[user].length,\n      0\n    );\n\n    this.totalEmojis = Object.keys(this.emojisPerUser).reduce(\n      (res, user) => res + this.emojisPerUser[user].length,\n      0\n    );\n\n    // Set messages per hour\n    this.messagesPerHourPerUser = hours.reduce((res, hour) => {\n      res[hour] = this.users!.reduce(\n        (result, user) => ({\n          ...result,\n          [user]: filtered.filter(\n            (message) => message.date.hour() === hour && message.author === user\n          ).length,\n        }),\n        {}\n      );\n\n      return res;\n    }, {} as Record<string, Record<string, number>>);\n\n    // Set messages per hour\n    this.messagesPerDayPerUser = weekdays.reduce((res, weekDay) => {\n      res[weekDay] = this.users!.reduce(\n        (result, user) => ({\n          ...result,\n          [user]: filtered.filter(\n            (message) =>\n              message.date.weekday() === weekDay && message.author === user\n          ).length,\n        }),\n        {}\n      );\n\n      return res;\n    }, {} as Record<string, Record<string, number>>);\n\n    // Set messages per month, just use an empty array if there are no messages\n    const dates = getMonthsBetween(\n      this.firstMessage.date,\n      this.lastMessage.date\n    );\n\n    this.messagesPerMonthPerUser = dates.reduce((res, date) => {\n      const dateFormat = date.format('MMM YYYY');\n\n      res[dateFormat] = this.users.reduce(\n        (list, user) => ({\n          ...list,\n          [user]: filtered.filter(\n            (message) =>\n              message.date.month() === date.month() &&\n              message.date.year() === date.year() &&\n              message.author === user\n          ).length,\n        }),\n        {}\n      );\n\n      return res;\n    }, {} as Record<string, Record<string, number>>);\n\n    this.conversationNames = getConversationSubjects(this.systemMessages);\n  }\n}\n\nexport default WhatsappData;\n","import * as React from 'react';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport { parseStringSync } from 'whatsapp-chat-parser';\nimport { useState } from 'react';\nimport { Message } from 'whatsapp-chat-parser/types/types';\nimport Header from './components/Header';\nimport AnalysisResults from './components/AnalysisResults';\nimport WhatsappData from './logic/whatsapp-data';\n\nfunction App() {\n  const [whatsappData, setWhatsappData] = useState(\n    new WhatsappData([])\n  );\n  const [filteredData, setFilteredData] = useState(\n    new WhatsappData([])\n  );\n\n  const handleNewData = (data: string | ArrayBuffer | null) => {\n    const result = parseStringSync(data as string);\n\n    if (result.length > 0) {\n      const whatsapp = new WhatsappData(result);\n      setWhatsappData(whatsapp);\n      setFilteredData(whatsapp);\n    }\n  };\n\n  const handleFilterChange = (filter: (filter: Message) => boolean) => {\n    const data = whatsappData.messages.filter(filter);\n    setFilteredData(new WhatsappData(data));\n  };\n\n  // Only add analysis results if we have data\n  const analysisResult = filteredData.users.length > 0 ? (\n    <>\n      {/*TODO: Re-enable filters*/}\n      {/*<Filters data={whatsappData} handleFilterChange={handleFilterChange} />*/}\n      <AnalysisResults data={filteredData!} />\n    </>\n  ) : null;\n\n  return (\n    <Container className=\"text-light main-container\">\n      <Header handleData={handleNewData} />\n      {analysisResult}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'material-icons/iconfont/material-icons.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
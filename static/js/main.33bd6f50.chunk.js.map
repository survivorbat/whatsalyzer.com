{"version":3,"sources":["assets/howto-3.webp","assets/howto-2.webp","assets/howto-1.webp","assets/howto-0.webp","components/InputForm.tsx","components/Header.tsx","constants/colors.ts","constants/charts.ts","components/charts/UserMessageCountDoughnut.tsx","logic/chart-helpers.ts","components/charts/UserMonthlyActivityGraph.tsx","components/charts/reusable/UserTableHead.tsx","components/charts/UserMessageCountTable.tsx","constants/time.ts","components/charts/UserHourlyActivityGraph.tsx","components/charts/reusable/AmountTag.tsx","components/charts/reusable/TopWordDisplay.tsx","components/charts/UserWordUsageTable.tsx","components/charts/UserEmojiUsageTable.tsx","components/charts/SubjectTimelineBars.tsx","components/DiagramHint.tsx","components/charts/WordCloud.tsx","components/charts/EmojiCloud.tsx","components/charts/UserWeeklyActivityGraph.tsx","components/charts/reusable/MinimalFrequencyTag.tsx","components/charts/reusable/SectionTitle.tsx","components/AnalysisResults.tsx","logic/whatsapp-data.ts","constants/dummy.ts","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","InputForm","_ref","handleData","_useState","useState","_useState2","_slicedToArray","whatsappFile","setWhatsappFile","_useState3","_useState4","inputOpen","setInputOpen","React","type","className","onClick","Modal","show","onHide","Header","closeVariant","closeButton","Form","onSubmit","event","preventDefault","reader","FileReader","onload","processEvent","target","result","readAsText","Body","FormGroup","FormControl","aria-describedby","placeholder","required","onChange","e","files","accept","FormText","id","muted","Footer","Button","variant","value","qa","howto","menuOpen","setMenuOpen","toggleMenu","menu","_defineProperty","Row","Col","lg","md","size","xs","Figure","FigureImage","src","howto0","alt","FigureCaption","howto1","howto2","howto3","href","rel","defaultColors","defaultGridYConfig","color","defaultGridXConfig","defaultLabelColor","defaultPluginConfig","legend","labels","UserMessageCountDoughnut","data","chartData","users","datasets","map","name","Math","round","messagesPerUser","length","totalMessages","backgroundColor","borderColor","options","plugins","tooltip","callbacks","label","dataSet","concat","dataset","dataIndex","Doughnut","datasetIdKey","getTopWords","inputData","minLength","amount","sorted","Object","keys","filter","w","sort","a","b","Array","fill","_","i","getMaxWordFrequency","minFrequency","words","usage","reduce","word","totalCount","input","res","key","colorIndex","index","UserMonthlyActivityGraph","userMonthData","messagesPerMonthPerUser","date","tension","_toConsumableArray","hidden","scales","y","grid","ticks","x","_objectSpread","context","Line","UserTableHead","scope","style","UserMessageCountTable","duration","moment","lastMessage","diff","firstMessage","totalDays","asDays","totalMonths","asMonths","totalYears","asYears","Table","borderless","responsive","title","parseFloat","toFixed","hours","weekdays","UserHourlyActivityGraph","userHourData","messagesPerHourPerUser","callback","AmountTag","TopWordDisplay","topWord","UserWordUsageTable","displayAmount","topWords","wordUsagePerUser","wordsPerUser","UserEmojiUsageTable","emojiUsagePerUser","emoji","emojisPerUser","SubjectTimelineBars","conversationNames","convo","startDate","unix","endDate","minBarLength","indexAxis","aspectRatio","format","autoSkip","beginAtZero","display","begin","end","Bar","DiagramHint","ChartJS","register","WordCloudController","WordElement","WordCloud","minFontSize","maxFontSize","relevantWords","wordUsage","maxFrequency","stepMultiplier","fit","animation","responsiveAnimationDuration","tooltipData","titleFont","displayColors","Chart","EmojiCloud","relevantEmojis","emojiUsage","padding","UserWeeklyActivityGraph","userWeekData","messagesPerDayPerUser","MinimalFrequencyTag","frequency","SectionTitle","AnalysisResults","conversationTimeline","minWordFrequency","totalWords","totalEmojis","message","author","UserActivityGraph","WhatsappData","messages","_this","this","_classCallCheck","totalCharacters","totalFemke","charactersPerUser","femkePerUser","systemMessages","whatsappMessages","m","filtered","trim","startsWith","endsWith","count","msg","replace","push","user","_res$msg$author","apply","split","toLowerCase","forEach","prev","_prev$msg$author","test","hour","weekDay","weekday","dates","from","to","countDate","add","getMonthsBetween","list","month","year","createMatch","match","renameMatch","dummyData","Date","App","setWhatsappData","filteredData","setFilteredData","analysisResult","Container","parseStringSync","whatsapp","ReactDOM","render","createElement","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33bd6f50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/howto-3.e985b23e.webp\";","module.exports = __webpack_public_path__ + \"static/media/howto-2.cf93e163.webp\";","module.exports = __webpack_public_path__ + \"static/media/howto-1.52a96a35.webp\";","module.exports = __webpack_public_path__ + \"static/media/howto-0.530f1b88.webp\";","import * as React from 'react';\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormGroup,\n  FormText,\n  Modal,\n} from 'react-bootstrap';\nimport { FormEvent, useState } from 'react';\nimport './InputForm.css';\n\ninterface InputFormProps {\n  handleData: (data: string | ArrayBuffer | null) => void;\n}\n\nfunction InputForm({ handleData }: InputFormProps) {\n  const [whatsappFile, setWhatsappFile] = useState({} as File);\n  const [inputOpen, setInputOpen] = useState(false);\n\n  const handleChange = (files: FileList) => setWhatsappFile(files[0]);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    const reader = new FileReader();\n    reader.onload = (processEvent) => handleData(processEvent.target!.result);\n    reader.readAsText(whatsappFile);\n\n    setInputOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"menu-button start-button\"\n        onClick={() => setInputOpen(true)}\n      >\n        Start\n      </button>\n      <Modal show={inputOpen} onHide={() => setInputOpen(false)}>\n        <Modal.Header\n          className=\"input-modal-header text-center\"\n          closeVariant=\"white\"\n          closeButton\n        >\n          Get Whatsalyzing\n        </Modal.Header>\n        <Form onSubmit={handleSubmit}>\n          <Modal.Body>\n            <FormGroup>\n              <FormControl\n                type=\"file\"\n                aria-describedby=\"input-file-help\"\n                placeholder=\"The file to upload\"\n                required\n                onChange={(e: any) => handleChange(e.target!.files)}\n                accept=\".txt\"\n              />\n              <FormText id=\"input-file-help\" muted>\n                The file to analyze, check &apos;Getting Started&apos; to learn\n                more.\n              </FormText>\n            </FormGroup>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\" variant=\"light\" value=\"Submit\">\n              Analyze\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n\nexport default InputForm;\n","import * as React from 'react';\nimport { Col, Collapse, Figure, Modal, Row } from 'react-bootstrap';\nimport './Header.css';\nimport { useState } from 'react';\nimport FigureCaption from 'react-bootstrap/FigureCaption';\nimport FigureImage from 'react-bootstrap/FigureImage';\nimport howto3 from '../assets/howto-3.webp';\nimport howto2 from '../assets/howto-2.webp';\nimport howto1 from '../assets/howto-1.webp';\nimport howto0 from '../assets/howto-0.webp';\nimport InputForm from './InputForm';\n\ninterface HeaderProps {\n  handleData: (data: string | ArrayBuffer | null) => void;\n}\n\nfunction Header({ handleData }: HeaderProps) {\n  const [menuOpen, setMenuOpen] = useState({\n    qa: false,\n    howto: false,\n  } as Record<string, boolean>);\n\n  const toggleMenu = (menu: string) =>\n    setMenuOpen({\n      qa: false,\n      howto: false,\n      [menu]: !menuOpen[menu],\n    });\n\n  return (\n    <div className=\"header-container\">\n      <Row>\n        <Col>\n          <header className=\"header\">\n            <h1 className=\"header-title\">Whatsalyzer</h1>\n          </header>\n        </Col>\n      </Row>\n      <Row className=\"menu-container\">\n        <Col lg={4} md={12}>\n          <button\n            type=\"button\"\n            className=\"menu-button\"\n            onClick={() => toggleMenu('howto')}\n          >\n            How does it work?\n          </button>\n        </Col>\n        <Col lg={4} md={12}>\n          <InputForm handleData={handleData} />\n        </Col>\n        <Col lg={4} md={12}>\n          <button\n            type=\"button\"\n            className=\"menu-button\"\n            onClick={() => toggleMenu('qa')}\n          >\n            Q&A\n          </button>\n        </Col>\n      </Row>\n      <Row className=\"info-container\">\n        <Col>\n          <Modal\n            size=\"lg\"\n            onHide={() => toggleMenu('howto')}\n            show={menuOpen.howto}\n          >\n            <Modal.Header\n              className=\"input-modal-header text-center\"\n              closeVariant=\"white\"\n              closeButton\n            >\n              How does it work?\n            </Modal.Header>\n            <Modal.Body className=\"Body\">\n              <ol>\n                <li>Go to the Whatsapp chat you want to analyze</li>\n                <li>Click on the menu button at the top-right</li>\n                <li>Select &apos;More&apos;</li>\n                <li>Click on &apos;Export chat&apos;</li>\n                <li>Click &apos;Without media&apos;</li>\n                <li>\n                  Send the export to yourself by email or through Whatsapp\n                </li>\n              </ol>\n              <p>Then select the file below to analyze the conversation.</p>\n              <Row>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto0}\n                      alt=\"Open the menu\"\n                    />\n                    <FigureCaption>\n                      2. Open options at the top-right\n                    </FigureCaption>\n                  </Figure>\n                </Col>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto1}\n                      alt=\"Select 'More'\"\n                    />\n                    <FigureCaption>3. Select &apos;More&apos;</FigureCaption>\n                  </Figure>\n                </Col>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto2}\n                      alt=\"Click on 'Export chat'\"\n                    />\n                    <FigureCaption>\n                      4. Click on &apos;Export chat&apos;\n                    </FigureCaption>\n                  </Figure>\n                </Col>\n                <Col className=\"howto-image-container\" xs={12} md={3}>\n                  <Figure>\n                    <FigureImage\n                      className=\"howto-image\"\n                      src={howto3}\n                      alt=\"Select 'Without media'\"\n                    />\n                    <FigureCaption>\n                      5. Select &apos;Without media&apos;\n                    </FigureCaption>\n                  </Figure>\n                </Col>\n              </Row>\n            </Modal.Body>\n          </Modal>\n          <Modal onHide={() => toggleMenu('qa')} show={menuOpen.qa}>\n            <Modal.Header\n              className=\"input-modal-header text-center\"\n              closeVariant=\"white\"\n              closeButton\n            >\n              Questions and Answers\n            </Modal.Header>\n            <Modal.Body>\n              <p>\n                <strong>Does Whatsalyzer save my data?</strong>\n              </p>\n              <p>\n                No, Whatsalyzer is a fully client-side application. This means\n                that your browser performs all the calculations and no data is\n                ever uploaded to a server. Check the source code if you want to\n                know more.\n              </p>\n              <p>\n                <strong>Can I analyze group chats?</strong>\n              </p>\n              <p>\n                Yes! Those stats are even more interesting than\n                &apos;normal&apos; chats.\n              </p>\n              <p>\n                <strong>Is Whatsalyzer open-source?</strong>\n              </p>\n              <p>\n                Yes! You can view the code right here:{' '}\n                <a\n                  href=\"https://github.com/survivorbat/whatsalyzer\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  github.com/survivorbat/whatsalyzer\n                </a>\n              </p>\n              <p>\n                <strong>Will new features be added?</strong>\n              </p>\n              <p>\n                Yes! The TODO list can be found in the README of the source\n                code, check the link above.\n              </p>\n            </Modal.Body>\n          </Modal>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Header;\n","const defaultColors = [\n  '#e6194b',\n  '#3cb44b',\n  '#ffe119',\n  '#4363d8',\n  '#f58231',\n  '#911eb4',\n  '#46f0f0',\n  '#f032e6',\n  '#bcf60c',\n  '#fabebe',\n  '#008080',\n  '#e6beff',\n  '#9a6324',\n  '#fffac8',\n  '#800000',\n  '#aaffc3',\n  '#808000',\n  '#ffd8b1',\n  '#0202e1',\n  '#808080',\n];\n\nexport default defaultColors;\n","export const defaultGridYConfig = {\n  color: 'rgba(255, 255, 255, 0.2)',\n};\n\nexport const defaultGridXConfig = {\n  color: 'rgba(255, 255, 255, 0.1)',\n};\n\nexport const defaultLabelColor = 'rgba(255, 255, 255, 0.6)';\n\nexport const defaultPluginConfig = {\n  legend: {\n    labels: {\n      color: 'white',\n    },\n  },\n};\n","import * as React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport defaultColors from '../../constants/colors';\nimport { DefaultProps } from './input-interface';\nimport { defaultPluginConfig } from '../../constants/charts';\n\nfunction UserMessageCountDoughnut({ data }: DefaultProps) {\n  const chartData = {\n    labels: data.users,\n    datasets: [\n      {\n        id: 0,\n        data: data.users.map((name) =>\n          Math.round(\n            (data.messagesPerUser[name].length / data.totalMessages) * 100\n          )\n        ),\n        backgroundColor: defaultColors,\n        borderColor: '#000000',\n      },\n    ],\n  };\n\n  const options = {\n    plugins: {\n      legend: defaultPluginConfig.legend,\n      tooltip: {\n        callbacks: {\n          label: (dataSet: any) =>\n            `${dataSet.label}: ${dataSet.dataset.data[dataSet.dataIndex]}%`,\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Doughnut datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserMessageCountDoughnut;\n","import defaultColors from '../constants/colors';\n\nexport interface TopWord {\n  amount: number;\n  name: string;\n}\n\nexport const getTopWords = (\n  inputData: Record<string, number>,\n  minLength: number,\n  amount: number\n): TopWord[] => {\n  const sorted = Object.keys(inputData)\n    .filter((w) => w.length >= minLength)\n    .sort((a, b) => inputData[b] - inputData[a]);\n\n  // Create an empty array with zeroes with the specified amount as length\n  return (\n    new Array(amount)\n      .fill(0)\n      // Map the empty array to the expected values using the index of the empty array element\n      .map((_, i) => ({ name: sorted[i], amount: inputData[sorted[i]] }))\n      // Filter out empty values\n      .filter((i) => !!i.name)\n  );\n};\n\nexport const getMaxWordFrequency = (\n  minFrequency: number,\n  words: string[],\n  usage: Record<string, number>\n) =>\n  words.reduce(\n    (result, word) => (usage[word] > result ? usage[word] : result),\n    minFrequency + 1\n  );\n\nexport const totalCount = (input: Record<string, number>): number =>\n  Object.keys(input).reduce((res, key) => res + input[key], 0);\n\nexport const colorIndex = (index: number) =>\n  defaultColors[index % defaultColors.length];\n","import * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { DefaultProps } from './input-interface';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n  defaultPluginConfig,\n} from '../../constants/charts';\nimport { colorIndex, totalCount } from '../../logic/chart-helpers';\n\nfunction UserMonthlyActivityGraph({ data }: DefaultProps) {\n  const userMonthData = data.users.map((name, index) => ({\n    id: index + 1,\n    label: name,\n    data: Object.keys(data.messagesPerMonthPerUser).map(\n      (date) => data.messagesPerMonthPerUser[date][name] || 0\n    ),\n    borderColor: colorIndex(index),\n    backgroundColor: colorIndex(index),\n    tension: 0.3,\n  }));\n\n  const chartData = {\n    labels: Object.keys(data.messagesPerMonthPerUser),\n    datasets: [\n      ...userMonthData,\n      {\n        id: 0,\n        label: 'Total Messages',\n        data: Object.keys(data.messagesPerMonthPerUser).map((date) =>\n          totalCount(data.messagesPerMonthPerUser[date])\n        ),\n        borderColor: 'white',\n        backgroundColor: 'white',\n        tension: 0.3,\n        hidden: true,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          color: defaultLabelColor,\n        },\n      },\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      ...defaultPluginConfig,\n      tooltip: {\n        callbacks: {\n          label: (context: any) =>\n            `${context.dataset.label}: ${\n              context.dataset.data[context.dataIndex]\n            } messages`,\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Line datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserMonthlyActivityGraph;\n","import * as React from 'react';\nimport { colorIndex } from '../../../logic/chart-helpers';\n\ninterface UserTableHeadProps {\n  name: string;\n  index: number;\n}\n\nfunction UserTableHead({ index, name }: UserTableHeadProps) {\n  return (\n    <th scope=\"row\" style={{ color: colorIndex(index) }}>\n      {name}\n    </th>\n  );\n}\n\nexport default UserTableHead;\n","import * as React from 'react';\nimport { Table } from 'react-bootstrap';\nimport moment from 'moment';\nimport { DefaultProps } from './input-interface';\nimport UserTableHead from './reusable/UserTableHead';\n\nfunction UserMessageCountTable({ data }: DefaultProps) {\n  const duration = moment.duration(\n    data.lastMessage.date.diff(data.firstMessage.date)\n  );\n\n  const totalDays = duration.asDays();\n  const totalMonths = duration.asMonths();\n  const totalYears = duration.asYears();\n\n  return (\n    <Table borderless responsive className=\"text-light bg-transparent\" variant=\"dark\">\n      <thead>\n        <tr>\n          <th scope=\"col\" title=\"The user\">\n            User\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The amount of messages a specific user has contributed to this conversation\"\n          >\n            #\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The percentage of messages a specific user has contributed to the conversation\"\n          >\n            %\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The daily amount of messages a user has contributed to the conversation\"\n          >\n            Daily\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The weekly amount of messages a user has contributed to the conversation\"\n          >\n            Monthly\n          </th>\n          <th\n            scope=\"col\"\n            title=\"The yearly amount of messages a user has contributed to the conversation\"\n          >\n            Yearly\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.users.map((name, index) => (\n          <tr key={name}>\n            <UserTableHead name={name} index={index} />\n            <td>{data.messagesPerUser[name].length}</td>\n            <td>\n              {Math.round(\n                (data.messagesPerUser[name].length / data.totalMessages) * 100\n              )}\n              %\n            </td>\n            <td>\n              {parseFloat(\n                `${data.messagesPerUser[name].length / totalDays}`\n              ).toFixed(1)}\n            </td>\n            <td>\n              {parseFloat(\n                `${data.messagesPerUser[name].length / totalMonths}`\n              ).toFixed(1)}\n            </td>\n            <td>\n              {parseFloat(\n                `${data.messagesPerUser[name].length / totalYears}`\n              ).toFixed(1)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr className=\"fw-bold\">\n          <th scope=\"row\">Total</th>\n          <td>{data.totalMessages}</td>\n          <td>100%</td>\n          <td>{parseFloat(`${data.totalMessages / totalDays}`).toFixed(1)}</td>\n          <td>\n            {parseFloat(`${data.totalMessages / totalMonths}`).toFixed(1)}\n          </td>\n          <td>{parseFloat(`${data.totalMessages / totalYears}`).toFixed(1)}</td>\n        </tr>\n      </tfoot>\n    </Table>\n  );\n}\n\nexport default UserMessageCountTable;\n","export const hours = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23,\n];\n\nexport const weekdays = [0, 1, 2, 3, 4, 5, 6];\n","import * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { DefaultProps } from './input-interface';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n  defaultPluginConfig,\n} from '../../constants/charts';\nimport { hours } from '../../constants/time';\nimport { colorIndex, totalCount } from '../../logic/chart-helpers';\n\nfunction UserHourlyActivityGraph({ data }: DefaultProps) {\n  const userHourData = data.users.map((name, index) => ({\n    id: index + 1,\n    label: name,\n    data: Object.keys(data.messagesPerHourPerUser).map(\n      (date) =>\n        (data.messagesPerHourPerUser[date][name] /\n          data.messagesPerUser[name].length) *\n          100 || 0\n    ),\n    borderColor: colorIndex(index),\n    backgroundColor: colorIndex(index),\n    tension: 0.3,\n  }));\n\n  const chartData = {\n    labels: hours,\n    datasets: [\n      ...userHourData,\n      {\n        id: 0,\n        label: 'Total Average',\n        data: Object.keys(data.messagesPerHourPerUser).map(\n          (date) =>\n            (totalCount(data.messagesPerHourPerUser[date]) /\n              data.totalMessages) *\n              100 || 0\n        ),\n        borderColor: 'white',\n        backgroundColor: 'white',\n        tension: 0.3,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          callback: (label: string) => `${label}%`,\n          color: defaultLabelColor,\n        },\n      },\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          callback: (label: string) => `${label}:00`,\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      ...defaultPluginConfig,\n      tooltip: {\n        callbacks: {\n          label: (context: any) =>\n            `${context.dataset.label}: ${Math.round(\n              context.dataset.data[context.dataIndex]\n            )}%`,\n          title: (context: any) => `${context[0].label}:00`,\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Line datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserHourlyActivityGraph;\n","import * as React from 'react';\n\ninterface AmountTagProps {\n  amount: number;\n}\n\nfunction AmountTag({ amount }: AmountTagProps) {\n  return <small className=\"text-light\">({amount})</small>;\n}\n\nexport default AmountTag;\n","import * as React from 'react';\nimport AmountTag from './AmountTag';\nimport { TopWord } from '../../../logic/chart-helpers';\n\ninterface TopWordDisplayProps {\n  topWord: TopWord;\n}\n\nfunction TopWordDisplay({ topWord }: TopWordDisplayProps) {\n  return (\n    <span className=\"rounded-pill participant-pill text-light\" key={topWord.name}>\n      {topWord.name} <AmountTag amount={topWord.amount} />\n    </span>\n  );\n}\n\nexport default TopWordDisplay;\n","import * as React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { UsageTableProps } from './input-interface';\nimport { getTopWords } from '../../logic/chart-helpers';\nimport UserTableHead from './reusable/UserTableHead';\nimport TopWordDisplay from './reusable/TopWordDisplay';\n\nfunction UserWordUsageTable({\n  data,\n  minLength,\n  displayAmount,\n}: UsageTableProps) {\n  const topWords = data.users.map((name) =>\n    getTopWords(data.wordUsagePerUser[name], minLength, displayAmount)\n  );\n\n  return (\n    <Table borderless responsive className=\"text-light\">\n      <thead>\n        <tr>\n          <th scope=\"col\" className=\"text-light\" title=\"The user\">\n            User\n          </th>\n          <th scope=\"col\" className=\"text-light\" title={`Top-${displayAmount} words this user uses`}>\n            Words\n          </th>\n          <th scope=\"col\" className=\"text-light\" title=\"Total amount of words this user has messaged\">\n            Total\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.users.map((name, index) => (\n          <tr key={name}>\n            <UserTableHead name={name} index={index} />\n            <td>\n              {topWords[index].map((word) => (\n                <TopWordDisplay key={word.name} topWord={word} />\n              ))}\n            </td>\n            <td className=\"text-light\">{data.wordsPerUser[name].length}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default UserWordUsageTable;\n","import * as React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { UsageTableProps } from './input-interface';\nimport { getTopWords } from '../../logic/chart-helpers';\nimport UserTableHead from './reusable/UserTableHead';\nimport TopWordDisplay from './reusable/TopWordDisplay';\n\nfunction UserEmojiUsageTable({\n  data,\n  minLength,\n  displayAmount,\n}: UsageTableProps) {\n  const topWords = data.users.map((name) =>\n    getTopWords(data.emojiUsagePerUser[name], minLength, displayAmount)\n  );\n\n  return (\n    <Table borderless responsive className=\"text-light\">\n      <thead>\n        <tr>\n          <th scope=\"col\" className=\"text-light\" title=\"The user\">\n            User\n          </th>\n          <th scope=\"col\" className=\"text-light\" title={`Top-${displayAmount} emojis this user uses`}>\n            Emojis\n          </th>\n          <th scope=\"col\" className=\"text-light\" title=\"Total amount of emojis this user has messaged\">\n            Total\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.users.map((name, index) => (\n          <tr key={name}>\n            <UserTableHead name={name} index={index} />\n            <td>\n              {topWords[index].map((emoji) => (\n                <TopWordDisplay key={emoji.name} topWord={emoji} />\n              ))}\n            </td>\n            <td className=\"text-light\">{data.emojisPerUser[name].length}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default UserEmojiUsageTable;\n","import * as React from 'react';\nimport moment from 'moment';\nimport { Bar } from 'react-chartjs-2';\nimport { DefaultProps } from './input-interface';\nimport defaultColors from '../../constants/colors';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n} from '../../constants/charts';\n\nfunction SubjectTimelineBars({ data }: DefaultProps) {\n  const chartData = {\n    labels: data.conversationNames.map((convo) => convo.name),\n    datasets: [\n      {\n        id: 0,\n        data: data.conversationNames.map((convo) => [\n          convo.startDate.unix(),\n          convo.endDate.unix(),\n        ]),\n        borderColor: defaultColors,\n        backgroundColor: defaultColors,\n        minBarLength: 5,\n      },\n    ],\n  };\n\n  const options = {\n    indexAxis: 'y',\n    aspectRatio: 1.5,\n    scales: {\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          callback: (label: number) => moment.unix(label).format('MMM YYYY'),\n          color: defaultLabelColor,\n          autoSkip: false,\n        },\n        beginAtZero: false,\n      },\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            const begin = context.dataset.data[context.dataIndex][0];\n            const end = context.dataset.data[context.dataIndex][1];\n\n            return `${moment.unix(begin).format('MMM YYYY')} - ${moment\n              .unix(end)\n              .format('MMM YYYY')}`;\n          },\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Bar options={options} data={chartData} />;\n}\n\nexport default SubjectTimelineBars;\n","import * as React from 'react';\n\nfunction DiagramHint() {\n  return (\n    <p>\n      <small className=\"text-light\">\n        Tip: Click on the names to toggle their visibility\n      </small>\n    </p>\n  );\n}\n\nexport default DiagramHint;\n","import * as React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js';\nimport { WordCloudController, WordElement } from 'chartjs-chart-wordcloud';\nimport defaultColors from '../../constants/colors';\nimport { CloudChartProps } from './input-interface';\n\nimport './Cloud.css';\nimport { getMaxWordFrequency } from '../../logic/chart-helpers';\n\nChartJS.register(WordCloudController, WordElement);\n\nfunction WordCloud({\n  data,\n  minFrequency,\n  minLength,\n  minFontSize,\n  maxFontSize,\n}: CloudChartProps) {\n  const relevantWords = Object.keys(data.wordUsage)\n    .filter((word) => word.length > minLength!)\n    .filter((word) => data.wordUsage[word] > minFrequency);\n\n  if (relevantWords.length === 0) {\n    return (\n      <span className=\"text-muted\">Not enough data for word cloud :(</span>\n    );\n  }\n\n  const maxFrequency = getMaxWordFrequency(\n    minFrequency,\n    relevantWords,\n    data.wordUsage\n  );\n\n  const frequencySpread = maxFrequency - minFrequency;\n  const fontSizeSpread = maxFontSize - minFontSize;\n\n  // For every frequency, this is the multiplier for the font size\n  const stepMultiplier = fontSizeSpread / frequencySpread;\n\n  const chartData = {\n    labels: relevantWords,\n    datasets: [\n      {\n        id: 0,\n        data: relevantWords.map(\n          (name) => stepMultiplier * (data.wordUsage[name] - 1) + minFontSize\n        ),\n        fit: true,\n        color: defaultColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n    responsiveAnimationDuration: 0,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (tooltipData: any) =>\n            `Found ${data.wordUsage[tooltipData.label]}`,\n        },\n        titleFont: {\n          size: 20,\n        },\n        displayColors: false,\n      },\n    },\n  };\n\n  // @ts-ignore\n  return (\n    <div className=\"cloud-container\">\n      <div className=\"cloud-wrapper\">\n        <Chart\n          type=\"wordCloud\"\n          datasetIdKey=\"id\"\n          data={chartData}\n          options={options}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WordCloud;\n","import * as React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js';\nimport { WordCloudController, WordElement } from 'chartjs-chart-wordcloud';\nimport { CloudChartProps } from './input-interface';\n\nimport './Cloud.css';\nimport { getMaxWordFrequency } from '../../logic/chart-helpers';\n\nChartJS.register(WordCloudController, WordElement);\n\nfunction EmojiCloud({\n  data,\n  minFrequency,\n  minFontSize,\n  maxFontSize,\n}: CloudChartProps) {\n  const relevantEmojis = Object.keys(data.emojiUsage).filter(\n    (emoji) => data.emojiUsage[emoji] >= minFrequency\n  );\n\n  if (relevantEmojis.length === 0) {\n    return (\n      <span className=\"text-muted\">Not enough data for emoji cloud :(</span>\n    );\n  }\n\n  const maxFrequency = getMaxWordFrequency(\n    minFrequency,\n    relevantEmojis,\n    data.emojiUsage\n  );\n\n  const frequencySpread = maxFrequency - minFrequency;\n  const fontSizeSpread = maxFontSize - minFontSize;\n\n  // For every frequency, this is the multiplier for the font size\n  const stepMultiplier = fontSizeSpread / frequencySpread;\n\n  const chartData = {\n    labels: relevantEmojis,\n    datasets: [\n      {\n        id: 0,\n        data: relevantEmojis.map(\n          (name) => stepMultiplier * (data.emojiUsage[name] - 1) + minFontSize\n        ),\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n    responsiveAnimationDuration: 0,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: (tooltipData: any) =>\n            `Found ${data.emojiUsage[tooltipData.label]}`,\n        },\n        titleFont: {\n          size: 100,\n        },\n        padding: 12,\n        displayColors: false,\n      },\n    },\n  };\n\n  // @ts-ignore\n  return (\n    <div className=\"cloud-container\">\n      <div className=\"cloud-wrapper\">\n        <Chart\n          type=\"wordCloud\"\n          datasetIdKey=\"id\"\n          data={chartData}\n          options={options}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default EmojiCloud;\n","import * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nimport { DefaultProps } from './input-interface';\nimport {\n  defaultGridXConfig,\n  defaultGridYConfig,\n  defaultLabelColor,\n  defaultPluginConfig,\n} from '../../constants/charts';\nimport { weekdays } from '../../constants/time';\nimport { colorIndex, totalCount } from '../../logic/chart-helpers';\n\nfunction UserWeeklyActivityGraph({ data }: DefaultProps) {\n  const userWeekData = data.users.map((name, index) => ({\n    id: index + 1,\n    label: name,\n    data: Object.keys(data.messagesPerDayPerUser).map(\n      (date) =>\n        (data.messagesPerDayPerUser[date][name] /\n          data.messagesPerUser[name].length) *\n          100 || 0\n    ),\n    borderColor: colorIndex(index),\n    backgroundColor: colorIndex(index),\n    tension: 0.2,\n  }));\n\n  const chartData = {\n    labels: weekdays,\n    datasets: [\n      ...userWeekData,\n      {\n        id: 0,\n        label: 'Total Average',\n        data: Object.keys(data.messagesPerDayPerUser).map(\n          (date) =>\n            (totalCount(data.messagesPerDayPerUser[date]) /\n              data.totalMessages) *\n              100 || 0\n        ),\n        borderColor: 'white',\n        backgroundColor: 'white',\n        tension: 0.3,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        grid: defaultGridYConfig,\n        ticks: {\n          callback: (label: string) => `${label}%`,\n          color: defaultLabelColor,\n        },\n      },\n      x: {\n        grid: defaultGridXConfig,\n        ticks: {\n          callback: (label: number) => moment.weekdays()[label],\n          color: defaultLabelColor,\n        },\n      },\n    },\n    plugins: {\n      ...defaultPluginConfig,\n      tooltip: {\n        callbacks: {\n          label: (context: any) =>\n            `${context.dataset.label}: ${Math.round(\n              context.dataset.data[context.dataIndex]\n            )}%`,\n          title: (context: any) => moment.weekdays()[context[0].label],\n        },\n      },\n    },\n  };\n\n  // @ts-ignore\n  return <Line datasetIdKey=\"id\" data={chartData} options={options} />;\n}\n\nexport default UserWeeklyActivityGraph;\n","import * as React from 'react';\n\ninterface MinimalFrequencyTagProps {\n  frequency: number;\n}\n\nfunction MinimalFrequencyTag({ frequency }: MinimalFrequencyTagProps) {\n  return (\n    <p>\n      <small className=\"text-light\">\n        Minimum frequency:\n        {frequency}\n      </small>\n    </p>\n  );\n}\n\nexport default MinimalFrequencyTag;\n","import { Col, Row } from 'react-bootstrap';\nimport * as React from 'react';\n\ninterface SectionTitleProps {\n  title: string;\n  name: string;\n}\n\nfunction SectionTitle({ name, title }: SectionTitleProps) {\n  return (\n    <Row className=\"chart-title\">\n      <Col>\n        <h2 className=\"section-title\" title={title}>\n          {name}\n        </h2>\n      </Col>\n    </Row>\n  );\n}\n\nexport default SectionTitle;\n","import * as React from 'react';\nimport 'chart.js/auto';\nimport './AnalysisResults.css';\nimport { Col, Row, Tab, Tabs } from 'react-bootstrap';\nimport UserMessageCountDoughnut from './charts/UserMessageCountDoughnut';\nimport UserActivityGraph from './charts/UserMonthlyActivityGraph';\nimport UserMessageCountTable from './charts/UserMessageCountTable';\nimport UserHourlyActivityGraph from './charts/UserHourlyActivityGraph';\nimport UserWordUsageTable from './charts/UserWordUsageTable';\nimport UserEmojiUsageTable from './charts/UserEmojiUsageTable';\nimport SubjectTimelineBars from './charts/SubjectTimelineBars';\nimport DiagramHint from './DiagramHint';\nimport WordCloud from './charts/WordCloud';\nimport EmojiCloud from './charts/EmojiCloud';\nimport UserWeeklyActivityGraph from './charts/UserWeeklyActivityGraph';\nimport { colorIndex } from '../logic/chart-helpers';\nimport MinimalFrequencyTag from './charts/reusable/MinimalFrequencyTag';\nimport SectionTitle from './charts/reusable/SectionTitle';\nimport WhatsappData from '../logic/whatsapp-data';\n\ninterface AnalysisResultsProps {\n  data: WhatsappData;\n}\n\nfunction AnalysisResults({ data }: AnalysisResultsProps) {\n  let conversationTimeline;\n\n  if (data.conversationNames.length > 0) {\n    conversationTimeline = (\n      <>\n        <SectionTitle\n          title=\"Timelines related to group conversations\"\n          name=\"Group Timelines\"\n        />\n        <Row>\n          <Col className=\"chart-container\">\n            <h3 title=\"A timeline of the 'names' of the conversation, only works for English chats now\">\n              Group Subject Timeline\n            </h3>\n            <SubjectTimelineBars data={data} />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n\n  // I want to filter on simple words, so I found 6 to be fair\n  const minWordLength = 6;\n\n  // This should ensure that the word cloud does not get too big but still appears\n  // if there aren't that many words\n  const minWordFrequency = Math.round(data.totalWords / 8000);\n  const minEmojiFrequency = 1;\n\n  // A top-5 is nice, but I want to make it a slider or something\n  const topUsageAmount = 5;\n\n  return (\n    <>\n      <SectionTitle\n        title=\"General conversation stats\"\n        name=\"Conversation Stats\"\n      />\n      <Row>\n        <Col className=\"header-container\" md={12} lg={4}>\n          <h3 title=\"All the users in this conversation\">Users</h3>\n          <div className=\"d-inline-flex flex-wrap justify-content-center\">\n            {data.users.map((name, index) => (\n              <div\n                key={name}\n                style={{ color: colorIndex(index) }}\n                className=\"fw-bold participant-pill\"\n              >\n                {name}\n              </div>\n            ))}\n          </div>\n        </Col>\n        <Col className=\"header-container\" md={12} lg={4}>\n          <h3 title=\"The total amount of messages in this conversation\">\n            Total Messages\n          </h3>\n          <div className=\"display-1 fw-bold\">{data.totalMessages}</div>\n        </Col>\n        <Col className=\"header-container\" md={12} lg={4}>\n          <h3 title=\"The total amount of emojis in this conversation\">\n            Total Emojis\n          </h3>\n          <div className=\"display-1 fw-bold\">{data.totalEmojis}</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"header-container\" md={12} lg={6}>\n          <h3 title=\"The first message in this conversation\">First Message</h3>\n          <div className=\"fw-bold\">{data.firstMessage.message}</div>\n          <div className=\"text-muted\">\n            {data.firstMessage.author},{' '}\n            {data.firstMessage.date.format('DD-MM-YYYY')}\n          </div>\n        </Col>\n        <Col\n          title=\"The last message in this conversation\"\n          className=\"header-container\"\n          md={12}\n          lg={6}\n        >\n          <h3>Last Message</h3>\n          <div className=\"fw-bold\">{data.lastMessage.message}</div>\n          <div className=\"text-muted\">\n            {data.lastMessage.author},{' '}\n            {data.lastMessage.date.format('DD-MM-YYYY')}\n          </div>\n        </Col>\n      </Row>\n      <SectionTitle\n        title=\"All data related to user activity\"\n        name=\"User Activity\"\n      />\n      <Row>\n        <Col className=\"chart-container\" md={12} lg={6}>\n          <h3 title=\"The percentage of messages a specific user has contributed to the conversation\">\n            Message Distribution\n          </h3>\n          <Row>\n            <Col>\n              <DiagramHint />\n              <UserMessageCountDoughnut data={data} />\n            </Col>\n          </Row>\n        </Col>\n        <Col className=\"chart-container\" md={12} lg={6}>\n          <h3 title=\"The total amount of messages\">Total Messages</h3>\n          <UserMessageCountTable data={data} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3 title=\"The amount of messages per user per month\">\n            Monthly Activity\n          </h3>\n          <DiagramHint />\n          <UserActivityGraph data={data} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3 title=\"The activity of a user on a particular week day, relative to their total activity\">\n            Relative Weekly Activity\n          </h3>\n          <DiagramHint />\n          <UserWeeklyActivityGraph data={data} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3 title=\"The activity of a user on a particular hour, relative to their total activity\">\n            Relative Hourly Activity\n          </h3>\n          <DiagramHint />\n          <UserHourlyActivityGraph data={data} />\n        </Col>\n      </Row>\n      <SectionTitle\n        title=\"All data related to the contents of a user's messages\"\n        name=\"Message Contents\"\n      />\n      <Row>\n        <Col className=\"chart-container\">\n          <h3\n            title={`Most popular words, only words with at least 6 characters and a frequency higher than ${minWordFrequency}`}\n          >\n            Popular Words\n          </h3>\n          <MinimalFrequencyTag frequency={minWordFrequency} />\n          <WordCloud\n            minFrequency={minWordFrequency}\n            minLength={minWordLength}\n            minFontSize={14}\n            maxFontSize={80}\n            data={data}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <UserWordUsageTable\n            data={data}\n            displayAmount={topUsageAmount}\n            minLength={minWordLength}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <h3\n            title={`Most popular emojis, only emojis with a frequency higher than ${minEmojiFrequency}`}\n          >\n            Popular Emojis\n          </h3>\n          <MinimalFrequencyTag frequency={minEmojiFrequency} />\n          <EmojiCloud\n            minFrequency={minEmojiFrequency}\n            minFontSize={24}\n            maxFontSize={220}\n            data={data}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"chart-container\">\n          <UserEmojiUsageTable\n            data={data}\n            displayAmount={topUsageAmount}\n            minLength={1}\n          />\n        </Col>\n      </Row>\n      {conversationTimeline}\n    </>\n  );\n}\n\nexport default AnalysisResults;\n","import { Message } from 'whatsapp-chat-parser/dist/types';\nimport moment from 'moment';\nimport { hours, weekdays } from '../constants/time';\n\n/**\n * Get all the months date A and date B\n * @param from The starting date\n * @param to The ending date\n */\nexport const getMonthsBetween = (\n  from: moment.Moment,\n  to: moment.Moment\n): moment.Moment[] => {\n  const dates = [];\n\n  const countDate = moment(from);\n\n  while (to.unix() >= countDate.unix()) {\n    dates.push(moment(countDate));\n    countDate.add(1, 'month');\n  }\n\n  return dates;\n};\n\ninterface ConversationName {\n  name: string;\n  user: string;\n  startDate: moment.Moment;\n  endDate: moment.Moment;\n}\n\nexport const getConversationSubjects = (\n  systemMessages: WhatsappMessage[]\n): ConversationName[] =>\n  systemMessages.reduce((prev, msg) => {\n    // TODO: These only work in English now...\n    const createMatch = msg.message.match(/^(.*) created group \"(.+),/);\n    const renameMatch = msg.message.match(\n      /^(.*) changed the subject from \"(.+), to \"(.+),/\n    );\n\n    // If we find the create message, we add it as the first item in the list with an unspecified end date\n    if (createMatch) {\n      prev.push({\n        name: createMatch[2],\n        user: createMatch[1],\n        startDate: msg.date,\n        endDate: moment(),\n      });\n    }\n\n    // If we find a rename message, we...\n    if (renameMatch) {\n      // First check if a message came before it, because if it does, that message now gets an\n      // end date\n      if (prev.length > 0) {\n        prev[prev.length - 1].endDate = msg.date;\n      }\n\n      // Then we add the new item with an unspecified end date\n      prev.push({\n        name: renameMatch[3],\n        user: renameMatch[1],\n        startDate: msg.date,\n        endDate: moment(),\n      });\n    }\n\n    return prev;\n  }, [] as ConversationName[]);\n\n/**\n * Get the words in a message\n * @param message The message to dissect\n */\nexport const getWords = (message: string): string[] =>\n  message\n    .split(/\\b[^\\w']+\\b/)\n    .map((w) => w.toLowerCase().replace(/[^a-zA-Z']/g, ''))\n    .filter((w) => w !== '');\n\n/**\n * Get the words in a message\n * @param message The message to dissect\n */\nexport const getEmojis = (message: string): string[] =>\n  [...message].filter((w) => /\\p{Extended_Pictographic}/u.test(w));\n\nexport interface WhatsappMessage {\n  date: moment.Moment;\n  author: string;\n  message: string;\n}\n\nclass WhatsappData {\n  readonly totalMessages: number;\n\n  readonly totalCharacters: number;\n\n  readonly totalWords: number;\n\n  readonly totalEmojis: number;\n\n  readonly totalFemke: number;\n\n  readonly users: string[];\n\n  readonly conversationNames: ConversationName[];\n\n  readonly messagesPerUser: Record<string, WhatsappMessage[]>;\n\n  readonly charactersPerUser: Record<string, number>;\n\n  readonly femkePerUser: Record<string, number>;\n\n  readonly wordsPerUser: Record<string, string[]>;\n\n  readonly emojisPerUser: Record<string, string[]>;\n\n  readonly wordUsagePerUser: Record<string, Record<string, number>>;\n\n  readonly emojiUsagePerUser: Record<string, Record<string, number>>;\n\n  readonly wordUsage: Record<string, number>;\n\n  readonly emojiUsage: Record<string, number>;\n\n  readonly messagesPerMonthPerUser: Record<string, Record<string, number>>;\n\n  readonly messagesPerHourPerUser: Record<string, Record<string, number>>;\n\n  readonly messagesPerDayPerUser: Record<string, Record<string, number>>;\n\n  readonly systemMessages: WhatsappMessage[];\n\n  readonly firstMessage: WhatsappMessage;\n\n  readonly lastMessage: WhatsappMessage;\n\n  /**\n   * Initialize the data class with the messages of this conversation.\n   * @param messages The parsed messages\n   */\n  constructor(readonly messages: Message[]) {\n    const whatsappMessages = messages.map((m) => ({\n      message: m.message,\n      author: m.author,\n      date: moment(m.date),\n    }));\n\n    this.systemMessages = whatsappMessages.filter((m) => m.author === 'System');\n\n    const filtered = whatsappMessages\n      .filter((m) => m.author !== 'System')\n      // This should take care of all <Media Omitted> messages, in whatever language the user has their phone\n      .filter(\n        (m) =>\n          !(m.message.trim().startsWith('<') && m.message.trim().endsWith('>'))\n      )\n      .sort((a, b) => a.date.unix() - b.date.unix());\n\n    this.firstMessage = filtered[0] || {\n      date: moment(0),\n      author: 'Not Found',\n      message: 'Not Found',\n    };\n    this.lastMessage = filtered[filtered.length - 1] || {\n      date: moment(0),\n      author: 'Not Found',\n      message: 'Not Found',\n    };\n\n    this.totalFemke = filtered.reduce(\n      (count, msg) => count + msg.message.replace(/[^A-Z]/g, '').length,\n      0\n    );\n    this.totalMessages = filtered.length;\n    this.totalCharacters = filtered.reduce(\n      (count, msg) => count + msg.message.length,\n      0\n    );\n\n    this.messagesPerUser = filtered.reduce((res, msg) => {\n      if (!res[msg.author]) {\n        res[msg.author] = [];\n      }\n\n      res[msg.author].push(msg);\n      return res;\n    }, {} as Record<string, WhatsappMessage[]>);\n\n    this.charactersPerUser = Object.keys(this.messagesPerUser).reduce(\n      (res, user) => {\n        res[user] = this.messagesPerUser[user].reduce(\n          (count, msg) => count + msg.message.length,\n          0\n        );\n        return res;\n      },\n      {} as Record<string, number>\n    );\n\n    this.femkePerUser = Object.keys(this.messagesPerUser).reduce(\n      (res, user) => {\n        res[user] = this.messagesPerUser[user].reduce(\n          (count, msg) => count + msg.message.replace(/[^A-Z]/g, '').length,\n          0\n        );\n        return res;\n      },\n      {} as Record<string, number>\n    );\n\n    // Set users, we use the keys of wordsPerUser to sort them based on the amount of messages\n    this.users = Object.keys(this.messagesPerUser).sort(\n      (a, b) => this.messagesPerUser[b].length - this.messagesPerUser[a].length\n    );\n\n    // Set words per user\n    this.wordsPerUser = filtered.reduce((res, msg) => {\n      if (!res[msg.author]) {\n        res[msg.author] = [];\n      }\n\n      res[msg.author].push(...getWords(msg.message));\n      return res;\n    }, {} as Record<string, string[]>);\n\n    this.wordUsagePerUser = Object.keys(this.wordsPerUser).reduce(\n      (res, user) => {\n        res[user] = this.wordsPerUser[user].reduce((result, word) => {\n          if (!result[word]) {\n            result[word] = 0;\n          }\n\n          result[word] += 1;\n          return result;\n        }, {} as Record<string, number>);\n\n        return res;\n      },\n      {} as Record<string, Record<string, number>>\n    );\n\n    this.wordUsage = Object.keys(this.wordUsagePerUser).reduce((res, user) => {\n      Object.keys(this.wordUsagePerUser[user]).forEach((word) => {\n        if (!res[word]) {\n          res[word] = 0;\n        }\n\n        res[word] += this.wordUsagePerUser[user][word];\n      });\n\n      return res;\n    }, {} as Record<string, number>);\n\n    this.emojisPerUser = filtered.reduce((prev, msg) => {\n      if (!prev[msg.author]) {\n        prev[msg.author] = [];\n      }\n\n      prev[msg.author].push(...getEmojis(msg.message));\n\n      return prev;\n    }, {} as Record<string, string[]>);\n\n    this.emojiUsagePerUser = Object.keys(this.emojisPerUser).reduce(\n      (res, user) => {\n        res[user] = this.emojisPerUser[user].reduce((result, word) => {\n          if (!result[word]) {\n            result[word] = 0;\n          }\n\n          result[word] += 1;\n          return result;\n        }, {} as Record<string, number>);\n\n        return res;\n      },\n      {} as Record<string, Record<string, number>>\n    );\n\n    this.emojiUsage = Object.keys(this.emojiUsagePerUser).reduce(\n      (res, user) => {\n        Object.keys(this.emojiUsagePerUser[user]).forEach((emoji) => {\n          if (!res[emoji]) {\n            res[emoji] = 0;\n          }\n\n          res[emoji] += this.emojiUsagePerUser[user][emoji];\n        });\n\n        return res;\n      },\n      {} as Record<string, number>\n    );\n\n    this.totalWords = Object.keys(this.wordsPerUser).reduce(\n      (res, user) => res + this.wordsPerUser[user].length,\n      0\n    );\n\n    this.totalEmojis = Object.keys(this.emojisPerUser).reduce(\n      (res, user) => res + this.emojisPerUser[user].length,\n      0\n    );\n\n    // Set messages per hour\n    this.messagesPerHourPerUser = hours.reduce((res, hour) => {\n      res[hour] = this.users!.reduce(\n        (result, user) => ({\n          ...result,\n          [user]: filtered.filter(\n            (message) => message.date.hour() === hour && message.author === user\n          ).length,\n        }),\n        {}\n      );\n\n      return res;\n    }, {} as Record<string, Record<string, number>>);\n\n    // Set messages per hour\n    this.messagesPerDayPerUser = weekdays.reduce((res, weekDay) => {\n      res[weekDay] = this.users!.reduce(\n        (result, user) => ({\n          ...result,\n          [user]: filtered.filter(\n            (message) =>\n              message.date.weekday() === weekDay && message.author === user\n          ).length,\n        }),\n        {}\n      );\n\n      return res;\n    }, {} as Record<string, Record<string, number>>);\n\n    // Set messages per month, just use an empty array if there are no messages\n    const dates = getMonthsBetween(\n      this.firstMessage.date,\n      this.lastMessage.date\n    );\n\n    this.messagesPerMonthPerUser = dates.reduce((res, date) => {\n      const dateFormat = date.format('MMM YYYY');\n\n      res[dateFormat] = this.users.reduce(\n        (list, user) => ({\n          ...list,\n          [user]: filtered.filter(\n            (message) =>\n              message.date.month() === date.month() &&\n              message.date.year() === date.year() &&\n              message.author === user\n          ).length,\n        }),\n        {}\n      );\n\n      return res;\n    }, {} as Record<string, Record<string, number>>);\n\n    this.conversationNames = getConversationSubjects(this.systemMessages);\n  }\n}\n\nexport default WhatsappData;\n","import { Message } from 'whatsapp-chat-parser/dist/types';\n\nconst dummyData: Message[] = [\n  {author: 'example user', date: new Date(2023, 3, 5, 0), message: 'This is example data'},\n  {author: 'robert', date: new Date(2023, 3, 6, 10), message: 'is it though?'},\n\n  {author: 'john', date: new Date(2023, 4, 24, 11), message: 'I found this meme'},\n  {author: 'savex', date: new Date(2023, 4, 24, 12), message: '_I_ found this meme'},\n  {author: 'linn', date: new Date(2023, 4, 24, 15), message: 'I observed this meme'},\n  {author: 'stella', date: new Date(2023, 4, 24, 15), message: 'I became this meme'},\n  {author: 'savex', date: new Date(2023, 4, 24, 16), message: 'I am this meme'},\n  {author: 'stella', date: new Date(2023, 4, 24, 16), message: 'this meme, is me'},\n  {author: 'savex', date: new Date(2023, 4, 24, 16), message: 'me is meme'},\n  {author: 'stella', date: new Date(2023, 4, 24, 16), message: 'me-me'},\n  {author: 'savex', date: new Date(2023, 4, 24, 17), message: 'me'},\n  {author: 'stella', date: new Date(2023, 4, 24, 17), message: 'm'},\n  {author: 'john', date: new Date(2023, 4, 24, 18), message: 'I'},\n  {author: 'john', date: new Date(2023, 4, 24, 18), message: '🍿'},\n  {author: 'john', date: new Date(2023, 4, 24, 18), message: '🍿'},\n  {author: 'john', date: new Date(2023, 4, 24, 18), message: '🍿'},\n  {author: 'john', date: new Date(2023, 4, 24, 19), message: '🍿'},\n  {author: 'robert', date: new Date(2023, 4, 24, 20), message: 'spam'},\n  {author: 'john', date: new Date(2023, 4, 24, 21), message: '@robert 🍿'},\n  {author: 'linn', date: new Date(2023, 4, 24, 21), message: 'Why do you hate popcorn'},\n\n  {author: 'john', date: new Date(2023, 4, 25, 12), message: 'Anyone up for food?'},\n  {author: 'savex', date: new Date(2023, 4, 26, 13), message: 'anytime'},\n  {author: 'linn', date: new Date(2023, 4, 26, 14), message: 'eh'},\n  {author: 'linn', date: new Date(2023, 4, 26, 14), message: 'too much homework srry'},\n  {author: 'jake', date: new Date(2023, 4, 27, 15), message: 'L'},\n  {author: 'robert', date: new Date(2023, 4, 24, 16), message: 'nty'},\n\n  {author: 'john', date: new Date(2023, 4, 28, 16), message: 'Alright everyone it\\'s birthday time'},\n  {author: 'savex', date: new Date(2023, 4, 28, 16), message: '2 months overdue but alright'},\n  {author: 'linn', date: new Date(2023, 4, 28, 17), message: 'What are your plans?'},\n  {author: 'john', date: new Date(2023, 4, 28, 17), message: 'I wanted to cook dinner for y\\'all 😊😊'},\n  {author: 'jake', date: new Date(2023, 4, 28, 17), message: 'I\\'ll bring snacks 🍿🍬🍫🍭'},\n  {author: 'savex', date: new Date(2023, 4, 28, 17), message: 'TIME TO PARTYYYYY'},\n  {author: 'stella', date: new Date(2023, 4, 28, 17), message: 'do you already have a date in mind?'},\n  {author: 'john', date: new Date(2023, 4, 28, 19), message: 'sorry for the late response was at work, perhaps next week on a sunday?'},\n  {author: 'jake', date: new Date(2023, 4, 28, 19), message: 'Aw I have football practice that day 😥😥'},\n  {author: 'jake', date: new Date(2023, 4, 28, 19), message: 'What about saturday?'},\n  {author: 'stella', date: new Date(2023, 4, 28, 19), message: 'fine with me'},\n  {author: 'savex', date: new Date(2023, 4, 28, 19), message: 'me too'},\n  {author: 'savex', date: new Date(2023, 4, 28, 19), message: 'only after 16:00 though'},\n\n  {author: 'linn', date: new Date(2023, 4, 29, 8), message: '👍👍👍👍👍👍'},\n  {author: 'linn', date: new Date(2023, 4, 29, 8), message: 'shall i bring some drinks'},\n  {author: 'jake', date: new Date(2023, 4, 29, 8), message: 'sounds good, wanna do something else before we eat?'},\n  {author: 'stella', date: new Date(2023, 4, 29, 9), message: 'Play some games at the 🐝🐝🐝🐝🐝?'},\n  {author: 'jake', date: new Date(2023, 4, 29, 9), message: 'Like that 👀👀👀👀👀👀👀👀'},\n  {author: 'linn', date: new Date(2023, 4, 29, 10), message: 'I\\'m in 👍'},\n\n  {author: 'savex', date: new Date(2023, 4, 30, 12), message: 'Gonna be epic'},\n  {author: 'linn', date: new Date(2023, 4, 30, 13), message: '@john can I drop off the drinks at your place first?'},\n  {author: 'john', date: new Date(2023, 4, 30, 14), message: 'Fine with me'},\n\n  {author: 'savex', date: new Date(2023, 5, 1, 8), message: 'What food are you going to prepare btw?'},\n  {author: 'john', date: new Date(2023, 5, 1, 9), message: '🍔?'},\n  {author: 'john', date: new Date(2023, 5, 1, 9), message: '🍕?'},\n  {author: 'savex', date: new Date(2023, 5, 1, 9), message: '🍔🍔🍔🍔🍔'},\n  {author: 'linn', date: new Date(2023, 5, 1, 9), message: '🍔❤️'},\n  {author: 'john', date: new Date(2023, 5, 1, 9), message: '🍔'},\n\n  {author: 'stella', date: new Date(2023, 5, 2, 14), message: 'anything is fine with me'},\n  {author: 'savex', date: new Date(2023, 5, 2, 15), message: 'Hamburger is better though'},\n  {author: 'jake', date: new Date(2023, 5, 29, 8), message: 'That\\'s a nice argument savex, why don\\'t you back it up with a source?'},\n  {author: 'savex', date: new Date(2023, 5, 29, 14), message: '👁️👄👁️'},\n  {author: 'linn', date: new Date(2023, 5, 29, 15), message: 'good source ngl'},\n\n  {author: 'john', date: new Date(2023, 5, 5, 10), message: 'Alright I\\'m waiting for your arrival 👀'},\n\n  {author: 'john', date: new Date(2023, 6, 14, 0), message: 'HAPPY BIRTHDAY JAKE'},\n  {author: 'jake', date: new Date(2023, 6, 14, 8), message: 'Tnx ❤️'},\n  {author: 'jake', date: new Date(2023, 6, 14, 8), message: 'You\\'re up wayyyy too early though'},\n  {author: 'john', date: new Date(2023, 6, 14, 9), message: 'NEVER TOO EARLY TO DECLARE FRIENDSHIP'},\n  {author: 'linn', date: new Date(2023, 6, 14, 10), message: 'true dat'},\n  {author: 'linn', date: new Date(2023, 6, 14, 10), message: 'love you jake, happy birthday'},\n  {author: 'savex', date: new Date(2023, 6, 14, 11), message: 'party time?'},\n  {author: 'stella', date: new Date(2023, 6, 14, 11), message: 'happy birthday!!!'},\n  {author: 'savex', date: new Date(2023, 6, 14, 12), message: 'happy bday! 😊'},\n\n  {author: 'example user', date: new Date(2023, 6, 15, 23), message: 'Still example data'},\n]\n\nexport default dummyData\n","import * as React from 'react';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport { parseStringSync } from 'whatsapp-chat-parser';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport AnalysisResults from './components/AnalysisResults';\nimport WhatsappData from './logic/whatsapp-data';\nimport dummyData from \"./constants/dummy\";\nimport {Message} from \"whatsapp-chat-parser/dist/types\";\n\nfunction App() {\n  const [whatsappData, setWhatsappData] = useState(\n    new WhatsappData(dummyData)\n  );\n  const [filteredData, setFilteredData] = useState(\n    new WhatsappData(dummyData)\n  );\n\n  const handleNewData = (data: string | ArrayBuffer | null) => {\n    const result = parseStringSync(data as string);\n\n    if (result.length > 0) {\n      const whatsapp = new WhatsappData(result);\n      setWhatsappData(whatsapp);\n      setFilteredData(whatsapp);\n    }\n  };\n\n  const handleFilterChange = (filter: (filter: Message) => boolean) => {\n    const data = whatsappData.messages.filter(filter);\n    setFilteredData(new WhatsappData(data));\n  };\n\n  // Only add analysis results if we have data\n  const analysisResult = filteredData.users.length > 0 ? (\n    <>\n      {/*TODO: Re-enable filters*/}\n      {/*<Filters data={whatsappData} handleFilterChange={handleFilterChange} />*/}\n      <AnalysisResults data={filteredData!} />\n    </>\n  ) : null;\n\n  return (\n    <Container className=\"text-light main-container\">\n      <Header handleData={handleNewData} />\n      {analysisResult}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'material-icons/iconfont/material-icons.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}